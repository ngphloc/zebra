<!DOCTYPE html SYSTEM "/wow/WOWstandard/xhtml-wowext-1.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>Relational and Conditional Operators</title>
</head>
<body>
<object data="../header.xhtml" type="text/wow"/>

<font size="-1">
<b>Trail</b>: Learning the Java Language
<br/>
<b>Lesson</b>: Language Basics
</font>

<h2>Relational and Conditional Operators</h2>
<blockquote>

A relational operator compares two values and determines the relationship between them. For example, <code>!=</code> returns <code>true</code> if its two operands are unequal. The next table summarizes the relational operators:

<p>
<table cellpadding="5">
<caption><strong>Relational Operators</strong></caption>
<tr>
<th align="left">Operator</th>
<th align="left">Use</th>
<th align="left">Description</th>
</tr>

<tr>

    <td>
	<code>></code>
    </td>
    <td>
	<code>op1 &gt; op2 </code>
    </td>
    <td>
	Returns <code>true</code> if <code>op1</code> is greater than <code>op2</code>
    </td>
</tr>
<tr>
    <td>
	<code>&gt;=</code>
    </td>
    <td>
	<code>op1 &gt;= op2</code>
    </td>
    <td>
	Returns <code>true</code> if <code>op1</code> is greater than or equal to <code>op2</code>
    </td>
</tr>
<tr>
    <td>
	<code>&lt;</code>
    </td>
    <td>
	<code>op1 &lt; op2</code>
    </td>
    <td>
	Returns <code>true</code> if <code>op1</code> is less than <code>op2</code>
    </td>
</tr>
<tr>
    <td>
	<code>&lt;=</code>
    </td>
    <td>
	<code>op1 &lt;= op2 </code>
    </td>
    <td>
	Returns <code>true</code> if <code>op1</code> is less than or equal to <code>op2</code>
    </td>
</tr>
<tr>
    <td>
	<code>==</code>
    </td>
    <td>
	<code>op1 == op2</code>
    </td>
    <td>
	Returns <code>true</code> if <code>op1</code> and <code>op2</code> are equal
    </td>
</tr>
<tr>
    <td>
	<code>!=</code>
    </td>
    <td>
	<code>op1 != op2 </code>
    </td>
    <td>
	Returns <code>true</code> if <code>op1</code> and <code>op2</code> are not equal
    </td>
</tr>
</table>
</p>

Following is an example,
<a target="_blank" href="resources/RelationalDemo.java"><font color="#bb000f"><code>RelationalDemo</code></font></a><a target="_blank" href="resources/RelationalDemo.java"><img src="images/sourceIcon.gif" width="11" height="11" border="0" align="MIDDLE" alt=" (in a .java source file)"/></a>, that defines three integer numbers and uses the relational operators to compare them. The relational operations are shown in boldface:

<blockquote><pre>
public class RelationalDemo {
    public static void main(String[] args) {

        //a few numbers
        int i = 37;
        int j = 42;
        int k = 42;
        System.out.println("Variable values...");
        System.out.println("    i = " + i);
        System.out.println("    j = " + j);
        System.out.println("    k = " + k);

        //greater than
        System.out.println("Greater than...");
        System.out.println("    i > j = " + (<b>i &gt; j</b>)); //false
        System.out.println("    j > i = " + (<b>j &gt; i</b>)); //true
        System.out.println("    k > j = " + (<b>k &gt; j</b>)); //false;
                                                      //they are equal

        //greater than or equal to
        System.out.println("Greater than or equal to...");
        System.out.println("    i >= j = " + (<b>i &gt;= j</b>)); //false
        System.out.println("    j >= i = " + (<b>j &gt;= i</b>)); //true
        System.out.println("    k >= j = " + (<b>k &gt;= j</b>)); //true

        //less than
        System.out.println("Less than...");
        System.out.println("    i &lt; j = " + (<b>i &lt; j</b>)); //true
        System.out.println("    j &lt; i = " + (<b>j &lt; i</b>)); //false
        System.out.println("    k &lt; j = " + (<b>k &lt; j</b>)); //false

        //less than or equal to
        System.out.println("Less than or equal to...");
        System.out.println("    i &lt;= j = " + (<b>i &lt;= j</b>)); //true
        System.out.println("    j &lt;= i = " + (<b>j &lt;= i</b>)); //false
        System.out.println("    k &lt;= j = " + (<b>k &lt;= j</b>)); //true

        //equal to
        System.out.println("Equal to...");
        System.out.println("    i == j = " + (<b>i == j</b>)); //false
        System.out.println("    k == j = " + (<b>k == j</b>)); //true

        //not equal to
        System.out.println("Not equal to...");
        System.out.println("    i != j = " + (<b>i != j</b>)); //true
        System.out.println("    k != j = " + (<b>k != j</b>)); //false
    }
}
</pre></blockquote>

Here's the output from this program:

<blockquote><pre>
Variable values...
    i = 37
    j = 42
    k = 42
Greater than...
    i > j = false
    j > i = true
    k > j = false
Greater than or equal to...
    i >= j = false
    j >= i = true
    k >= j = true
Less than...
    i &lt; j = true
    j &lt; i = false
    k &lt; j = false
Less than or equal to...
    i &lt;= j = true
    j &lt;= i = false
    k &lt;= j = true
Equal to...
    i == j = false
    k == j = true
Not equal to...
    i != j = true
    k != j = false
</pre></blockquote>

Relational operators often are used with conditional operators to construct more complex decision-making expressions. The Java programming language supports six conditional operators&#8212;five binary and one unary&#8212;as shown in the following table.
<p>
<table cellpadding="5">
<caption><strong>Conditional Operators</strong></caption>
<tr>
<th align="left">Operator</th>
<th align="left">Use</th>
<th align="left">Description</th>
</tr>

<tr>
    <td>
	<code>&amp;&amp;</code>
    </td>
    <td>
	<code>op1 &amp;&amp; op2</code>
    </td>
    <td>
	Returns <code>true</code>
        if <code>op1</code> and <code>op2</code> are both <code>true</code>;
	conditionally evaluates <code>op2</code>
    </td>
</tr>
<tr>
    <td>
	<code>||</code>
    </td>
    <td>
	<code>op1 || op2</code>
    </td>
    <td>
	Returns <code>true</code>
        if either <code>op1</code> or <code>op2</code> is <code>true</code>;
	conditionally evaluates <code>op2</code>
    </td>
</tr>
<tr>
    <td>
	<code>!</code>
    </td>
    <td>
	<code>!op</code>
    </td>
    <td>
	Returns <code>true</code> if <code>op</code> is <code>false</code>
    </td>
</tr>
<tr>
    <td>
	<code>&amp;</code>
    </td>
    <td>
	<code>op1 &amp; op2</code>
    </td>
    <td>
	Returns <code>true</code>
        if <code>op1</code> and <code>op2</code> are both 
        boolean and both <code>true</code>;
	always evaluates <code>op1</code> and <code>op2</code>;
        if both operands are numbers, performs bitwise
        <code>AND</code> operation
    </td>
</tr>
<tr>
    <td>
	<code>|</code>
    </td>
    <td>
	<code>op1 | op2</code>
    </td>
    <td>
	Returns <code>true</code>
        if both <code>op1</code> and <code>op2</code> are boolean
        and either <code>op1</code> or <code>op2</code> is <code>true</code>;
	always evaluates <code>op1</code> and <code>op2</code>;
        if both operands are numbers,
        performs bitwise inclusive <code>OR</code> operation
    </td>
</tr>
<tr>
    <td>
	<code>^</code>
    </td>
    <td>
	<code>op1 ^ op2</code>
    </td>
    <td>
	Returns <code>true</code>
        if <code>op1</code> and <code>op2</code> are different &#151;
        that is, if one or the other of
        the operands, but not both, is <code>true</code>
    </td>
</tr>
</table>
</p>

One such operator is <code>&amp;&amp;</code>, which performs the <i>conditional</i> <code>AND</code> operation. You can use two different relational operators along with <code>&amp;&amp;</code> to determine whether both relationships are <code>true</code>. The following line of code uses this technique to determine whether an array index is between two boundaries. It determines whether the index is both greater than or equal to 0 and less than <code>NUM_ENTRIES</code>, which is a previously defined constant value.

<blockquote><pre>
0 &lt;= index &amp;&amp; index &lt; NUM_ENTRIES
</pre></blockquote>
Note that in some instances, the second operand to a conditional operator 
may not be evaluated. Consider this code segment:
<blockquote><pre>
(numChars &lt; LIMIT) &amp;&amp; (...)
</pre></blockquote>

The <code>&amp;&amp;</code> operator will return <code>true</code> only if <i>both</i> operands are <code>true</code>. So, if <code>numChars</code> is greater than or equal to <code>LIMIT</code>, the left-hand operand for <code>&amp;&amp;</code> is <code>false</code>, and the return value of <code>&amp;&amp;</code> can be determined without evaluating the right-hand operand. In such a case, the interpreter will not evaluate the right-hand operand. This case has important implications if the right-hand operand has side effects, such as reading from a stream, updating a value, or making a calculation. 
<p>
When both operands are boolean, the operator <code>&amp;</code> performs the same operation as <code>&amp;&amp;</code>. However, <code>&amp;</code> always evaluates both of its operands and returns <code>true</code> if both are <code>true</code>. Likewise, when the operands are boolean, <code>|</code> performs the same operation as <code>||</code>. The <code>|</code> operator always evaluates both of its operands and returns <code>true</code> if at least one of its operands is <code>true</code>. When their operands are numbers, <code>&amp;</code> and <code>|</code> perform bitwise manipulations. The next section has more information. 
</p>


</blockquote>

<object data="../footer.xhtml" type="text/wow"/>
</body>
</html>
