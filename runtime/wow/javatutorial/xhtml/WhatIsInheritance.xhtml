<!DOCTYPE html SYSTEM "/wow/WOWstandard/xhtml-wowext-1.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>What Is Inheritance?</title>
</head>
<body>
<object data="../header.xhtml" type="text/wow"/>

<font size="-1">
<b>Trail</b>: Learning the Java Language
<br/>
<b>Lesson</b>: Object-Oriented Programming Concepts
</font>

<h2>What Is Inheritance?</h2>
<blockquote>

<p>
Generally speaking, objects are defined in terms of classes. You know a lot about an object by knowing its class. Even if you don't know what a penny-farthing is, if I told you it was a bicycle, you would know that it had two wheels, handle bars, and pedals.
</p>

Object-oriented systems take this a step further and allow classes to be defined in terms of other classes. For example, mountain bikes, road bikes, and tandems are all kinds of bicycles. In object-oriented terminology, mountain bikes, road bikes, and tandems are all <em>subclasses</em> of the bicycle class. Similarly, the bicycle class is the <em>superclass</em> of mountain bikes, road bikes, and tandems. 
This relationship is shown in the following figure.

<p><center><img src="images/concepts-bikeHierarchy.gif" width="466" height="350" align="bottom" alt=""/></center></p>
Each subclass <em>inherits</em> state (in the form of variable declarations) from the superclass. Mountain bikes, road bikes, and tandems share some states: cadence, speed, and the like. Also, each subclass inherits methods from the superclass. Mountain bikes, road bikes, and tandems share some behaviors: braking and changing pedaling speed, for example.

<p>
However, subclasses are not limited to the state and behaviors provided to them by their superclass. Subclasses can add variables and methods to the ones they inherit from the superclass. Tandem bicycles have two seats and two sets of handle bars; some mountain bikes have an additional chain ring, giving them a lower gear ratio.
</p>

Subclasses can also <em>override</em> inherited methods and provide specialized implementations for those methods. For example, if you had a mountain bike with an additional chain ring, you would override the "change gears" method so that the rider could shift into those lower gears.

<p>
You are not limited to just one layer of inheritance. The inheritance tree, or class <em>hierarchy</em>, can be as deep as needed. Methods and variables are inherited down through the levels. In general, the farther down in the hierarchy a class appears, the more specialized its behavior.
</p>

<blockquote><hr/><strong>Note: </strong>Class hierarchies should reflect what the classes <em>are</em>, not how they're <em>implemented</em>. If we implemented a tricycle class, it might be convenient to make it a subclass of the bicycle class &#151; after all, both tricycles and bicycles have a current speed and cadence &#151; but because a tricycle is not a bicycle, it's unwise to publicly tie the two classes together. It could confuse users, make the tricycle class have methods (such as "change gears") that it doesn't need, and make updating or improving the tricycle class difficult.
<hr/></blockquote>

<p>
The <code>Object</code> class is at the top of class hierarchy, and each class is its descendant (directly or indirectly). A variable of type <code>Object</code> can hold a reference to any object, such as an instance of a class or an array. <code>Object</code> provides behaviors that are shared by all objects running in the Java Virtual Machine. For example, all classes inherit <code>Object</code>'s <code>toString</code> method, which returns a string representation of the object. The section 
<a href="ManagingInheritance" class="conditional">Managing Inheritance</a>
<a href="ManagingInheritance" class="conditional"><img src="images/tutorialIcon.gif" width="11" height="11" border="0" align="middle" alt=" (in the Learning the Java Language trail)"/></a> covers the <code>Object</code> class in detail. 
</p>


<p>
Inheritance offers the following benefits:
<ul>
<li>
Subclasses provide specialized behaviors from the basis of common elements provided by the superclass. Through the use of inheritance, programmers can reuse the code in the superclass many times.
</li> 
<li>Programmers can implement superclasses called <em>abstract classes</em> that define common behaviors. The abstract superclass defines and may partially implement the behavior, but much of the class is undefined and unimplemented. Other programmers fill in the details with specialized subclasses.
</li>
</ul>
</p>

</blockquote>

<object data="../footer.xhtml" type="text/wow"/>
</body>
</html>
