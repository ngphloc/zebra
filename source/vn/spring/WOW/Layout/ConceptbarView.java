/*


    This file is part of WOW! based on AHA! (Adaptive Hypermedia for All) which is free software (GNU General Public License) developed by Paul De Bra - Eindhoven University of Technology and University

    WOW! is also open source software; 


*/
/**
 * ConceptbarView.java 1.0, August 30, 2008
 *
 *Copyright (c) 2006 by Eindhoven University of Technology and modified by University of Science, 2008. All Rights Reserved.
 *
 * This software is proprietary information of Eindhoven University of Technology and University
 * of Science. It may be used according to the GNU license of Eindhoven University of Technology
 */

package vn.spring.WOW.Layout;


import java.util.*;
import java.io.*;

import vn.spring.WOW.engine.*;
import vn.spring.WOW.exceptions.*;
import vn.spring.WOW.datacomponents.*;
import vn.spring.WOW.WOWStatic;


/**
 * Conceptbar View
 */
public class ConceptbarView implements View {

  final static private String viewType="CONCEPTBARVIEW";
  final static private boolean stat=false;

  private String viewName=null;
  private String title=null;
  private String background=null;
  private String mime="text/html";

  private String initParams=null;   //view specific parameters from view.xml file

  private SecWndLinks secWndLinks=null;

  //--------------------------------
  // Vars for local use
  public Profile profile=null;

//=============================================================


//Constructor
  public ConceptbarView(String name,String bg,String params,String title,SecWndLinks swls){
    this.viewName=name;
    this.background=bg;
    this.initParams=params;
    this.title=title;

    this.secWndLinks=swls;

  }

  public ConceptbarView(){

 }

  public void setSecWndLinks(SecWndLinks swl){
    this.secWndLinks=swl;
  }

  public void setViewName(String name){
    this.viewName=name;
  }

  public void setBackgound(String back){
    this.background=back;
  }

  public void setParams(String params){
    this.initParams=params;
  }

  public void setTitle(String title){
    this.title=title;
  }




  /**
   * returns secWndLInks table
   */
  public SecWndLinks getSecWndLinks(){
    return this.secWndLinks;
  }

   /**
   * returns returns true is view needs to be updated when MAIN updated
   */
   public boolean isStatic(){
     return ConceptbarView.stat;
   }



  /**
   * returns the view with name viewName
  */
   public String getViewName(){
     return viewName;
   }

   /**
   * returns the viewtype of this view(CONCEPTBARVIEW)
   */
   public String getViewType(){
      return viewType;
   }

   /**
    * returns the Mime type of the response generated by the view
    */
    public String getMime(){
      return this.mime;
  }

 /**
 * generates the the Browers code(HTML/XHTML) for this view
 */
    public InputStream genBrsCode(String conceptname, Profile profile, Map params){

      String conceptName=conceptname;
      String course = ""; try {course = profile.getAttributeValue("personal", "course");} catch (Exception e) {e.printStackTrace();}
      ConceptDependences cd=(ConceptDependences) WOWStatic.CourseInfoTbl.getCourseInfo(course).dependences.getDependences().get(conceptName);
      String cName=null;

      this.profile=profile;

    //Construct HTML code for the menu output file
      StringBuffer outstr = new StringBuffer();

      try {
        String conceptpath=WOWStatic.config.Get("CONTEXTPATH");
        outstr.append("<html><head>");
        outstr.append("<meta http-equiv='Cache-Control' Content='no-cache' />\n<meta http-equiv='Expires' content='-1' />\n<meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8\" />");
      String directory = null;
        try {
        directory = profile.getAttributeValue("personal","directory");
        } catch (InvalidAttributeException iae) {System.out.println(iae);}
        outstr.append("<title>"+this.title+"</title></head><body background='"+conceptpath+"/"+directory+"/"+background+"' >\n\n");

        //put the hole output in a second cell of a 2-cell table(for shifting to the right)
        outstr.append("<table width=100%><tr><td width="+WOWStatic.VM().getParam("leftspace",this.initParams)+">&nbsp;</td><td>\n");


    //======================NEW CODE============
        LinkedList pre=cd.getPrerequisites();
        LinkedList out=cd.getOutcomes();

        //Show prerequisites
        //Sort the prerequisites list
        TreeSet treeSet=new TreeSet(pre);
        Iterator iterator=treeSet.iterator();

        if(iterator.hasNext()) outstr.append("<span align='center'><font SIZE=2><b>Background:</b></FONT></span><p>\n");
        outstr.append("<TABLE width=100%>");
        while(iterator.hasNext()){
          cName=(String)iterator.next();//(String) pre.get(t);
          HTMLAnchor link1=new HTMLAnchor();
          outstr.append("<TR><TD  ALIGN='LEFT' VALIGN='MIDDLE'><FONT SIZE=2>"+link1.genLinkTo(cName,profile)+"</FONT></TD></TR>\n");
        }
        outstr.append("</TABLE>\n</CENTER>");

        //Show line if needed
        if(!pre.isEmpty() && !out.isEmpty()) outstr.append("<hr width=80% hight=3>");

        //Show outcomes
        //Sort the outcomes list
        treeSet=new TreeSet(out);
        iterator=treeSet.iterator();
        if(iterator.hasNext()) outstr.append("<SPAN align=center><FONT SIZE=2><b>Outcome:</b></FONT></span><p>\n");
        outstr.append("<CENTER><TABLE width=100%>");
        while(iterator.hasNext()){
          cName=(String)iterator.next();//(String) out.get(t);
          HTMLAnchor link1=new HTMLAnchor();
          outstr.append("<TR><TD ALIGN='LEFT' VALIGN='MIDDLE'><FONT SIZE=2>"+link1.genLinkTo(cName,profile)+"</FONT></TD></TR>\n");
        }
        outstr.append("</TABLE>\n</CENTER>\n");
        outstr.append("</TD></TABLE>");
        outstr.append("</BODY></HTML>");
    //==================================

    }
     catch (Exception e) {
       System.err.println("ConceptbarView: "+ e.getMessage());
       e.printStackTrace(System.out);
      }

      //Convert output to inputstream(needed by the servlet)
     InputStream insb = new ByteArrayInputStream(outstr.toString().getBytes());

      return insb;
    }


   //Returns a course name from a string
   String getCourseName(String nodeValue,int pidx){

           String courseName="";
           int t=1;
           String c;
           c=String.valueOf(nodeValue.charAt(pidx-t));
           while((pidx>=t) && !c.equals(" ")){
             courseName=c+courseName;
             t=t+1;
             if (pidx>=t) c=String.valueOf(nodeValue.charAt(pidx-t));
            }

            return courseName;

   }

}
