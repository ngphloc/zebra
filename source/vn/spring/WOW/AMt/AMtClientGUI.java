//------------------------------------------------------------------------------
// Unit Name: AMtClientGUI.java
// Author: T.J. Dekker, reviewed and modified by Loc Nguyen
// Date of Creation: 14-09-2008
// Purpose: GUI class for the AMtClient Application.
//
// DOCUMENT CHANGES
//
// Date:           Author:             Change:
// -----------------------------------------------------------------------------
// 14-09-2008      T.J. Dekker         Creation
//------------------------------------------------------------------------------

package vn.spring.WOW.AMt;

import java.awt.*;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.io.*;
import java.nio.channels.*;
import javax.swing.*;
import javax.swing.table.*;
import javax.swing.tree.*;
import javax.swing.JFileChooser;
import javax.swing.filechooser.*;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Vector;

import vn.spring.WOW.util.LoginDialog;
import vn.spring.WOW.formeditor.FormEditorApplet;
import vn.spring.WOW.generatelisteditor.EditorApplet;
import vn.spring.WOW.graphauthor.GraphAuthor.GraphAuthor;
import vn.spring.zebra.um.OverlayBayesUM;
import vn.spring.zebra.um.gui.OverlayBayesInspector;

import es.uco.WOW.TestEditor.TestEditorApplet;

/**
 * GUI class for the AMtClient Application.
 * @author T.J. Dekker, changed by Loc Nguyen
 * @version 1.0.0
 */
public class AMtClientGUI extends javax.swing.JPanel implements TCCCPopupInterface {

    /**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	/**
     * Default Constructor.
     * Creates a new Panel with all GUI elements and functionality.
     * @param parent the JFrame that contains this panel
     */
    public AMtClientGUI(JFrame parent) {
      FParent = parent;
      gui = this;
      initComponents();

      AMt = new AMtClient(gui);
      postInitComponents();
    }



    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        mb = new javax.swing.JMenuBar();
        mnuFile = new javax.swing.JMenu();
        mniLogin = new javax.swing.JMenuItem();
        mniChangeProfile = new javax.swing.JMenuItem();
        jSeparator10 = new javax.swing.JSeparator();
        mniLogout = new javax.swing.JMenuItem();
        mniExit = new javax.swing.JMenuItem();
        mnuEdit = new javax.swing.JMenu();
        mniCopy = new javax.swing.JMenuItem();
        mniPaste = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JSeparator();
        mniRename = new javax.swing.JMenuItem();
        mniDelete = new javax.swing.JMenuItem();
        jSeparator6 = new javax.swing.JSeparator();
        mniRefresh = new javax.swing.JMenuItem();
        mnuOperation = new javax.swing.JMenu();
        mniCCC = new javax.swing.JMenuItem();
        mnuOpenWith = new javax.swing.JMenu();
        mniOpenGaf = new javax.swing.JMenuItem();
        mniOpenBif = new javax.swing.JMenuItem();
        mniOpenWow = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JSeparator();
        mniOpenFrm = new javax.swing.JMenuItem();
        mniOpenTest = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        mniUpload = new javax.swing.JMenuItem();
        mniDownload = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JSeparator();
        mniNewFolder = new javax.swing.JMenuItem();
        mnuTools = new javax.swing.JMenu();
        mniGraphAuthor = new javax.swing.JMenuItem();
        mniBayesAuthor = new javax.swing.JMenuItem();
        mniConceptEditor = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JSeparator();
        mniFormEditor = new javax.swing.JMenuItem();
        mniTestEditor = new javax.swing.JMenuItem();
        mnuHelp = new javax.swing.JMenu();
        mniAbout = new javax.swing.JMenuItem();
        popRightClick = new javax.swing.JPopupMenu();
        pmniCCC = new javax.swing.JMenuItem();
        pmniUpload = new javax.swing.JMenuItem();
        pmniDownload = new javax.swing.JMenuItem();
        pmniSave = new javax.swing.JMenuItem();
        pmniCancel = new javax.swing.JMenuItem();
        pmniClear = new javax.swing.JMenuItem();
        pmniOpen = new javax.swing.JMenuItem();
        pmniHomeLocal = new javax.swing.JMenuItem();
        pmniUpLocal = new javax.swing.JMenuItem();
        pmniRefreshLocal = new javax.swing.JMenuItem();
        pmniNewFolderLocal = new javax.swing.JMenuItem();
        pmniDeleteLocal = new javax.swing.JMenuItem();
        pmniRenameLocal = new javax.swing.JMenuItem();
        pmniUpRemote = new javax.swing.JMenuItem();
        pmniNewFolderRemote = new javax.swing.JMenuItem();
        pmniRenameRemote = new javax.swing.JMenuItem();
        pmniHomeRemote = new javax.swing.JMenuItem();
        pmniRefreshRemote = new javax.swing.JMenuItem();
        pmniDeleteRemote = new javax.swing.JMenuItem();
        pmniOpenGaf = new javax.swing.JMenuItem();
        pmniOpenBif = new javax.swing.JMenuItem();
        pmniOpenWow = new javax.swing.JMenuItem();
        pmniOpenFrm = new javax.swing.JMenuItem();
        pmniOpenTest = new javax.swing.JMenuItem();
        pmniDeleteDomain = new javax.swing.JMenuItem();
        pmniCreateWow = new javax.swing.JMenuItem();
        pmniCreateGaf = new javax.swing.JMenuItem();
        pmniCreateFrm = new javax.swing.JMenuItem();
        pmniCopy = new javax.swing.JMenuItem();
        pmniPaste = new javax.swing.JMenuItem();
        pnlButtons = new javax.swing.JPanel();
        pnlLocalButtons = new javax.swing.JPanel();
        txtPathLocal = new javax.swing.JTextField();
        btnDelLocal = new javax.swing.JButton();
        btnNewFolderLocal = new javax.swing.JButton();
        btnRefreshLocal = new javax.swing.JButton();
        jSeparator12 = new javax.swing.JSeparator();
        btnUpLocal = new javax.swing.JButton();
        btnHomeLocal = new javax.swing.JButton();
        pnlRemoteButtons = new javax.swing.JPanel();
        btnHomeRemote = new javax.swing.JButton();
        btnUpRemote = new javax.swing.JButton();
        btnRefreshRemote = new javax.swing.JButton();
        jSeparator13 = new javax.swing.JSeparator();
        btnNewFolderRemote = new javax.swing.JButton();
        btnDelRemote = new javax.swing.JButton();
        txtPathRemote = new javax.swing.JTextField();
        splFileInfo = new javax.swing.JSplitPane();
        splLocalRemote = new javax.swing.JSplitPane();
        pnlLocal = new javax.swing.JPanel();
        spnLocal = new javax.swing.JScrollPane();
        triLocal = new javax.swing.JTree();
        lblLocal = new javax.swing.JLabel();
        pnlRemote = new javax.swing.JPanel();
        lblRemoteInfo = new javax.swing.JLabel();
        tabRemote = new javax.swing.JTabbedPane();
        pnlAppFiles = new javax.swing.JPanel();
        spnRemoteAppFiles = new javax.swing.JScrollPane();
        triRemote = new javax.swing.JTree();
        pnlAuthorFiles = new javax.swing.JPanel();
        spnRemoteAuthorFiles = new javax.swing.JScrollPane();
        pnlInfo = new javax.swing.JPanel();
        spnInfo = new javax.swing.JScrollPane();

        mb.setFont(new java.awt.Font("Dialog", 0, 12));
        mnuFile.setMnemonic('F');
        mnuFile.setText("File");
        mnuFile.setFont(new java.awt.Font("Dialog", 0, 12));
        mniLogin.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        mniLogin.setFont(new java.awt.Font("Dialog", 0, 12));
        mniLogin.setText("Login");
        mniLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniLoginActionPerformed(evt);
            }
        });

        mnuFile.add(mniLogin);

        mniChangeProfile.setFont(new java.awt.Font("Dialog", 0, 12));
        mniChangeProfile.setText("Author Profile");
        mniChangeProfile.setEnabled(false);
        mniChangeProfile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniChangeProfileActionPerformed(evt);
            }
        });

        mnuFile.add(mniChangeProfile);

        jSeparator10.setPreferredSize(new java.awt.Dimension(0, 6));
        mnuFile.add(jSeparator10);

        mniLogout.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        mniLogout.setFont(new java.awt.Font("Dialog", 0, 12));
        mniLogout.setText("Logout");
        mniLogout.setEnabled(false);
        mniLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniLogoutActionPerformed(evt);
            }
        });

        mnuFile.add(mniLogout);

        mniExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        mniExit.setFont(new java.awt.Font("Dialog", 0, 12));
        mniExit.setText("Exit");
        mniExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniExitActionPerformed(evt);
            }
        });

        mnuFile.add(mniExit);

        mb.add(mnuFile);

        mnuEdit.setMnemonic('E');
        mnuEdit.setText("Edit");
        mnuEdit.setFont(new java.awt.Font("Dialog", 0, 12));
        mniCopy.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        mniCopy.setFont(new java.awt.Font("Dialog", 0, 12));
        mniCopy.setText("Copy");
        mniCopy.setEnabled(false);
        mniCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniCopyActionPerformed(evt);
            }
        });

        mnuEdit.add(mniCopy);

        mniPaste.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        mniPaste.setFont(new java.awt.Font("Dialog", 0, 12));
        mniPaste.setText("Paste");
        mniPaste.setEnabled(false);
        mniPaste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniPasteActionPerformed(evt);
            }
        });

        mnuEdit.add(mniPaste);

        jSeparator3.setPreferredSize(new java.awt.Dimension(0, 6));
        mnuEdit.add(jSeparator3);

        mniRename.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F2, 0));
        mniRename.setFont(new java.awt.Font("Dialog", 0, 12));
        mniRename.setText("Rename");
        mniRename.setEnabled(false);
        mniRename.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniRenameActionPerformed(evt);
            }
        });

        mnuEdit.add(mniRename);

        mniDelete.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, 0));
        mniDelete.setFont(new java.awt.Font("Dialog", 0, 12));
        mniDelete.setText("Delete");
        mniDelete.setEnabled(false);
        mniDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniDeleteActionPerformed(evt);
            }
        });

        mnuEdit.add(mniDelete);

        jSeparator6.setPreferredSize(new java.awt.Dimension(0, 6));
        mnuEdit.add(jSeparator6);

        mniRefresh.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, 0));
        mniRefresh.setFont(new java.awt.Font("Dialog", 0, 12));
        mniRefresh.setText("Refresh");
        mniRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniRefreshActionPerformed(evt);
            }
        });

        mnuEdit.add(mniRefresh);

        mb.add(mnuEdit);

        mnuOperation.setMnemonic('O');
        mnuOperation.setText("Operation");
        mnuOperation.setFont(new java.awt.Font("Dialog", 0, 12));
        mniCCC.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F3, 0));
        mniCCC.setFont(new java.awt.Font("Dialog", 0, 12));
        mniCCC.setText("Concept Consistency Check");
        mniCCC.setEnabled(false);
        mniCCC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniCCCActionPerformed(evt);
            }
        });

        mnuOperation.add(mniCCC);

        mnuOpenWith.setText("Open With");
        mnuOpenWith.setFont(new java.awt.Font("Dialog", 0, 12));
        mnuOpenWith.setEnabled(false);
        mniOpenGaf.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F6, java.awt.event.InputEvent.SHIFT_MASK));
        mniOpenGaf.setFont(new java.awt.Font("Dialog", 0, 12));
        mniOpenGaf.setText("Graph Authoring Tool");
        mniOpenGaf.setEnabled(false);
        mniOpenGaf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniOpenGafActionPerformed(evt);
            }
        });

        mnuOpenWith.add(mniOpenGaf);

        mniOpenBif.setFont(new java.awt.Font("Dialog", 0, 12));
        mniOpenBif.setText("Bayes Editor");
        mniOpenBif.setEnabled(false);
        mniOpenBif.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniOpenBifActionPerformed(evt);
            }
        });

        mnuOpenWith.add(mniOpenBif);

        mniOpenWow.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F7, java.awt.event.InputEvent.SHIFT_MASK));
        mniOpenWow.setFont(new java.awt.Font("Dialog", 0, 12));
        mniOpenWow.setText("Concept Editor");
        mniOpenWow.setEnabled(false);
        mniOpenWow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniOpenWowActionPerformed(evt);
            }
        });

        mnuOpenWith.add(mniOpenWow);

        mnuOpenWith.add(jSeparator5);

        mniOpenFrm.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F8, java.awt.event.InputEvent.SHIFT_MASK));
        mniOpenFrm.setFont(new java.awt.Font("Dialog", 0, 12));
        mniOpenFrm.setText("Form Editor");
        mniOpenFrm.setEnabled(false);
        mniOpenFrm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniOpenFrmActionPerformed(evt);
            }
        });

        mnuOpenWith.add(mniOpenFrm);

        mniOpenTest.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F9, java.awt.event.InputEvent.SHIFT_MASK));
        mniOpenTest.setFont(new java.awt.Font("Dialog", 0, 12));
        mniOpenTest.setText("Test Editor");
        mniOpenTest.setEnabled(false);
        mniOpenTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniOpenTestActionPerformed(evt);
            }
        });

        mnuOpenWith.add(mniOpenTest);

        mnuOperation.add(mnuOpenWith);

        jSeparator1.setPreferredSize(new java.awt.Dimension(0, 6));
        mnuOperation.add(jSeparator1);

        mniUpload.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_U, java.awt.event.InputEvent.CTRL_MASK));
        mniUpload.setFont(new java.awt.Font("Dialog", 0, 12));
        mniUpload.setText("Upload");
        mniUpload.setEnabled(false);
        mniUpload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniUploadActionPerformed(evt);
            }
        });

        mnuOperation.add(mniUpload);

        mniDownload.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_MASK));
        mniDownload.setFont(new java.awt.Font("Dialog", 0, 12));
        mniDownload.setText("Download");
        mniDownload.setEnabled(false);
        mniDownload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniDownloadActionPerformed(evt);
            }
        });

        mnuOperation.add(mniDownload);

        jSeparator2.setPreferredSize(new java.awt.Dimension(0, 6));
        mnuOperation.add(jSeparator2);

        mniNewFolder.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        mniNewFolder.setFont(new java.awt.Font("Dialog", 0, 12));
        mniNewFolder.setText("New Application");
        mniNewFolder.setEnabled(false);
        mniNewFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniNewFolderActionPerformed(evt);
            }
        });

        mnuOperation.add(mniNewFolder);

        mb.add(mnuOperation);

        mnuTools.setMnemonic('T');
        mnuTools.setText("Tools");
        mnuTools.setFont(new java.awt.Font("Dialog", 0, 12));
        mniGraphAuthor.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F6, java.awt.event.InputEvent.CTRL_MASK));
        mniGraphAuthor.setFont(new java.awt.Font("Dialog", 0, 12));
        mniGraphAuthor.setText("Start Graph Authoring Tool");
        mniGraphAuthor.setEnabled(false);
        mniGraphAuthor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniGraphAuthorActionPerformed(evt);
            }
        });

        mnuTools.add(mniGraphAuthor);

        mniConceptEditor.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F7, java.awt.event.InputEvent.CTRL_MASK));
        mniConceptEditor.setFont(new java.awt.Font("Dialog", 0, 12));
        mniConceptEditor.setText("Start Concept Editor");
        mniConceptEditor.setEnabled(false);
        mniConceptEditor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniConceptEditorActionPerformed(evt);
            }
        });

        mnuTools.add(mniConceptEditor);

        mniBayesAuthor.setFont(new java.awt.Font("Dialog", 0, 12));
        mniBayesAuthor.setText("Start Bayes Authoring Tool");
        mniBayesAuthor.setEnabled(false);
        mniBayesAuthor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniBayesAuthorActionPerformed(evt);
            }
        });

        mnuTools.add(mniBayesAuthor);

        mnuTools.add(jSeparator4);

        mniFormEditor.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F8, java.awt.event.InputEvent.CTRL_MASK));
        mniFormEditor.setFont(new java.awt.Font("Dialog", 0, 12));
        mniFormEditor.setText("Start Form Editor");
        mniFormEditor.setEnabled(false);
        mniFormEditor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniFormEditorActionPerformed(evt);
            }
        });

        mnuTools.add(mniFormEditor);

        mniTestEditor.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F9, java.awt.event.InputEvent.CTRL_MASK));
        mniTestEditor.setFont(new java.awt.Font("Dialog", 0, 12));
        mniTestEditor.setText("Start Test Editor");
        mniTestEditor.setEnabled(false);
        mniTestEditor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniTestEditorActionPerformed(evt);
            }
        });

        mnuTools.add(mniTestEditor);

        mb.add(mnuTools);

        mnuHelp.setMnemonic('H');
        mnuHelp.setText("Help");
        mnuHelp.setFont(new java.awt.Font("Dialog", 0, 12));
        mniAbout.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        mniAbout.setFont(new java.awt.Font("Dialog", 0, 12));
        mniAbout.setText("About");
        mniAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniAboutActionPerformed(evt);
            }
        });

        mnuHelp.add(mniAbout);

        mb.add(mnuHelp);

        popRightClick.setFont(new java.awt.Font("Dialog", 0, 12));
        pmniCCC.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vn/spring/WOW/AMt/pics/emptyicon.png")));
        pmniCCC.setText("Concept Consistency Check");
        pmniCCC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pmniCCCActionPerformed(evt);
            }
        });

        popRightClick.add(pmniCCC);

        pmniUpload.setFont(new java.awt.Font("Dialog", 0, 12));
        pmniUpload.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vn/spring/WOW/AMt/pics/emptyicon.png")));
        pmniUpload.setText("Upload");
        pmniUpload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pmniUploadActionPerformed(evt);
            }
        });

        popRightClick.add(pmniUpload);

        pmniDownload.setFont(new java.awt.Font("Dialog", 0, 12));
        pmniDownload.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vn/spring/WOW/AMt/pics/emptyicon.png")));
        pmniDownload.setText("Download");
        pmniDownload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pmniDownloadActionPerformed(evt);
            }
        });

        popRightClick.add(pmniDownload);

        pmniSave.setFont(new java.awt.Font("Dialog", 0, 12));
        pmniSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vn/spring/WOW/AMt/pics/emptyicon.png")));
        pmniSave.setText("Save Info");
        pmniSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pmniSaveActionPerformed(evt);
            }
        });

        popRightClick.add(pmniSave);

        pmniCancel.setFont(new java.awt.Font("Dialog", 0, 12));
        pmniCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vn/spring/WOW/AMt/pics/emptyicon.png")));
        pmniCancel.setText("Cancel");
        pmniCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pmniCancelActionPerformed(evt);
            }
        });

        popRightClick.add(pmniCancel);

        pmniClear.setFont(new java.awt.Font("Dialog", 0, 12));
        pmniClear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vn/spring/WOW/AMt/pics/emptyicon.png")));
        pmniClear.setText("Clear");
        pmniClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pmniClearActionPerformed(evt);
            }
        });

        popRightClick.add(pmniClear);

        pmniOpen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vn/spring/WOW/AMt/pics/emptyicon.png")));
        pmniOpen.setText("Open");
        pmniOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pmniOpenActionPerformed(evt);
            }
        });

        popRightClick.add(pmniOpen);

        pmniHomeLocal.setFont(new java.awt.Font("Dialog", 0, 12));
        pmniHomeLocal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vn/spring/WOW/AMt/pics/home.png")));
        pmniHomeLocal.setText("Home");
        pmniHomeLocal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pmniHomeLocalActionPerformed(evt);
            }
        });

        popRightClick.add(pmniHomeLocal);

        pmniUpLocal.setFont(new java.awt.Font("Dialog", 0, 12));
        pmniUpLocal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vn/spring/WOW/AMt/pics/up.png")));
        pmniUpLocal.setText("Up");
        pmniUpLocal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pmniUpLocalActionPerformed(evt);
            }
        });

        popRightClick.add(pmniUpLocal);

        pmniRefreshLocal.setFont(new java.awt.Font("Dialog", 0, 12));
        pmniRefreshLocal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vn/spring/WOW/AMt/pics/refresh.png")));
        pmniRefreshLocal.setText("Refresh");
        pmniRefreshLocal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pmniRefreshLocalActionPerformed(evt);
            }
        });

        popRightClick.add(pmniRefreshLocal);

        pmniNewFolderLocal.setFont(new java.awt.Font("Dialog", 0, 12));
        pmniNewFolderLocal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vn/spring/WOW/AMt/pics/newfolder.png")));
        pmniNewFolderLocal.setText("New Folder");
        pmniNewFolderLocal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pmniNewFolderLocalActionPerformed(evt);
            }
        });

        popRightClick.add(pmniNewFolderLocal);

        pmniDeleteLocal.setFont(new java.awt.Font("Dialog", 0, 12));
        pmniDeleteLocal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vn/spring/WOW/AMt/pics/delete.png")));
        pmniDeleteLocal.setText("Delete");
        pmniDeleteLocal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pmniDeleteLocalActionPerformed(evt);
            }
        });

        popRightClick.add(pmniDeleteLocal);

        pmniRenameLocal.setFont(new java.awt.Font("Dialog", 0, 12));
        pmniRenameLocal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vn/spring/WOW/AMt/pics/emptyicon.png")));
        pmniRenameLocal.setText("Rename");
        pmniRenameLocal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pmniRenameLocalActionPerformed(evt);
            }
        });

        popRightClick.add(pmniRenameLocal);

        pmniUpRemote.setFont(new java.awt.Font("Dialog", 0, 12));
        pmniUpRemote.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vn/spring/WOW/AMt/pics/up.png")));
        pmniUpRemote.setText("Up");
        pmniUpRemote.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pmniUpRemoteActionPerformed(evt);
            }
        });

        popRightClick.add(pmniUpRemote);

        pmniNewFolderRemote.setFont(new java.awt.Font("Dialog", 0, 12));
        pmniNewFolderRemote.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vn/spring/WOW/AMt/pics/newfolder.png")));
        pmniNewFolderRemote.setText("New Application");
        pmniNewFolderRemote.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pmniNewFolderRemoteActionPerformed(evt);
            }
        });

        popRightClick.add(pmniNewFolderRemote);

        pmniRenameRemote.setFont(new java.awt.Font("Dialog", 0, 12));
        pmniRenameRemote.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vn/spring/WOW/AMt/pics/emptyicon.png")));
        pmniRenameRemote.setText("Rename");
        pmniRenameRemote.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pmniRenameRemoteActionPerformed(evt);
            }
        });

        popRightClick.add(pmniRenameRemote);

        pmniHomeRemote.setFont(new java.awt.Font("Dialog", 0, 12));
        pmniHomeRemote.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vn/spring/WOW/AMt/pics/home.png")));
        pmniHomeRemote.setText("Home");
        pmniHomeRemote.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pmniHomeRemoteActionPerformed(evt);
            }
        });

        popRightClick.add(pmniHomeRemote);

        pmniRefreshRemote.setFont(new java.awt.Font("Dialog", 0, 12));
        pmniRefreshRemote.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vn/spring/WOW/AMt/pics/refresh.png")));
        pmniRefreshRemote.setText("Refresh");
        pmniRefreshRemote.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pmniRefreshRemoteActionPerformed(evt);
            }
        });

        popRightClick.add(pmniRefreshRemote);

        pmniDeleteRemote.setFont(new java.awt.Font("Dialog", 0, 12));
        pmniDeleteRemote.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vn/spring/WOW/AMt/pics/delete.png")));
        pmniDeleteRemote.setText("Delete");
        pmniDeleteRemote.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pmniDeleteRemoteActionPerformed(evt);
            }
        });

        popRightClick.add(pmniDeleteRemote);

        pmniOpenGaf.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vn/spring/WOW/AMt/pics/emptyicon.png")));
        pmniOpenGaf.setText("Open with Graph Author");
        pmniOpenGaf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pmniOpenGafActionPerformed(evt);
            }
        });

        popRightClick.add(pmniOpenGaf);

        pmniOpenBif.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vn/spring/WOW/AMt/pics/emptyicon.png")));
        pmniOpenBif.setText("Open with Bayes Author");
        pmniOpenBif.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pmniOpenBifActionPerformed(evt);
            }
        });

        popRightClick.add(pmniOpenBif);

        pmniOpenWow.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vn/spring/WOW/AMt/pics/emptyicon.png")));
        pmniOpenWow.setText("Open with Concept Editor");
        pmniOpenWow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pmniOpenWowActionPerformed(evt);
            }
        });

        popRightClick.add(pmniOpenWow);

        pmniOpenFrm.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vn/spring/WOW/AMt/pics/emptyicon.png")));
        pmniOpenFrm.setText("Open with Form Editor");
        pmniOpenFrm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pmniOpenFrmActionPerformed(evt);
            }
        });

        popRightClick.add(pmniOpenFrm);

        pmniOpenTest.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vn/spring/WOW/AMt/pics/emptyicon.png")));
        pmniOpenTest.setText("Open with Test Editor");
        pmniOpenTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pmniOpenTestActionPerformed(evt);
            }
        });

        popRightClick.add(pmniOpenTest);

        pmniDeleteDomain.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vn/spring/WOW/AMt/pics/emptyicon.png")));
        pmniDeleteDomain.setText("Delete Domain Model from WOW!");
        pmniDeleteDomain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pmniDeleteDomainActionPerformed(evt);
            }
        });

        popRightClick.add(pmniDeleteDomain);

        pmniCreateWow.setFont(new java.awt.Font("Dialog", 0, 12));
        pmniCreateWow.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vn/spring/WOW/AMt/pics/emptyicon.png")));
        pmniCreateWow.setText("New Concept Editor File");
        popRightClick.add(pmniCreateWow);

        pmniCreateGaf.setFont(new java.awt.Font("Dialog", 0, 12));
        pmniCreateGaf.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vn/spring/WOW/AMt/pics/emptyicon.png")));
        pmniCreateGaf.setText("New Graph Editor File");
        popRightClick.add(pmniCreateGaf);

        pmniCreateFrm.setFont(new java.awt.Font("Dialog", 0, 12));
        pmniCreateFrm.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vn/spring/WOW/AMt/pics/emptyicon.png")));
        pmniCreateFrm.setText("New Form Editor File");
        popRightClick.add(pmniCreateFrm);

        pmniCopy.setFont(new java.awt.Font("Dialog", 0, 12));
        pmniCopy.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vn/spring/WOW/AMt/pics/copy.png")));
        pmniCopy.setText("Copy");
        pmniCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pmniCopyActionPerformed(evt);
            }
        });

        popRightClick.add(pmniCopy);

        pmniPaste.setFont(new java.awt.Font("Dialog", 0, 12));
        pmniPaste.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vn/spring/WOW/AMt/pics/paste.png")));
        pmniPaste.setText("Paste");
        pmniPaste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pmniPasteActionPerformed(evt);
            }
        });

        popRightClick.add(pmniPaste);

        setLayout(new java.awt.GridBagLayout());

        setBackground(new java.awt.Color(255, 255, 255));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });

        pnlButtons.setLayout(new java.awt.GridBagLayout());

        pnlButtons.setBackground(new java.awt.Color(255, 255, 255));
        pnlButtons.setBorder(new javax.swing.border.EtchedBorder());
        pnlButtons.setMaximumSize(new java.awt.Dimension(32767, 40));
        pnlButtons.setMinimumSize(new java.awt.Dimension(320, 40));
        pnlButtons.setPreferredSize(new java.awt.Dimension(600, 40));
        pnlLocalButtons.setLayout(new java.awt.GridBagLayout());

        pnlLocalButtons.setBackground(new java.awt.Color(255, 255, 255));
        txtPathLocal.setMaximumSize(new java.awt.Dimension(9999, 25));
        txtPathLocal.setMinimumSize(new java.awt.Dimension(10, 25));
        txtPathLocal.setPreferredSize(new java.awt.Dimension(150, 25));
        txtPathLocal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPathLocalActionPerformed(evt);
            }
        });
        txtPathLocal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtPathLocalFocusGained(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
        pnlLocalButtons.add(txtPathLocal, gridBagConstraints);

        btnDelLocal.setBackground(new java.awt.Color(255, 255, 255));
        btnDelLocal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vn/spring/WOW/AMt/pics/delete.png")));
        btnDelLocal.setToolTipText("Delete Local");
        btnDelLocal.setMargin(new java.awt.Insets(2, 2, 2, 2));
        btnDelLocal.setMaximumSize(new java.awt.Dimension(27, 25));
        btnDelLocal.setMinimumSize(new java.awt.Dimension(27, 25));
        btnDelLocal.setPreferredSize(new java.awt.Dimension(27, 25));
        btnDelLocal.setEnabled(false);
        btnDelLocal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelLocalActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
        pnlLocalButtons.add(btnDelLocal, gridBagConstraints);

        btnNewFolderLocal.setBackground(new java.awt.Color(255, 255, 255));
        btnNewFolderLocal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vn/spring/WOW/AMt/pics/newfolder.png")));
        btnNewFolderLocal.setToolTipText("New Local Folder");
        btnNewFolderLocal.setMargin(new java.awt.Insets(2, 2, 2, 2));
        btnNewFolderLocal.setMaximumSize(new java.awt.Dimension(27, 25));
        btnNewFolderLocal.setMinimumSize(new java.awt.Dimension(27, 25));
        btnNewFolderLocal.setPreferredSize(new java.awt.Dimension(27, 25));
        btnNewFolderLocal.setEnabled(false);
        btnNewFolderLocal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewFolderLocalActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
        pnlLocalButtons.add(btnNewFolderLocal, gridBagConstraints);

        btnRefreshLocal.setBackground(new java.awt.Color(255, 255, 255));
        btnRefreshLocal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vn/spring/WOW/AMt/pics/refresh.png")));
        btnRefreshLocal.setToolTipText("Refresh Local");
        btnRefreshLocal.setMargin(new java.awt.Insets(2, 2, 2, 2));
        btnRefreshLocal.setMaximumSize(new java.awt.Dimension(27, 25));
        btnRefreshLocal.setMinimumSize(new java.awt.Dimension(27, 25));
        btnRefreshLocal.setPreferredSize(new java.awt.Dimension(27, 25));
        btnRefreshLocal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshLocalActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
        pnlLocalButtons.add(btnRefreshLocal, gridBagConstraints);

        jSeparator12.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator12.setMaximumSize(new java.awt.Dimension(10, 25));
        jSeparator12.setMinimumSize(new java.awt.Dimension(10, 25));
        jSeparator12.setPreferredSize(new java.awt.Dimension(10, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
        pnlLocalButtons.add(jSeparator12, gridBagConstraints);

        btnUpLocal.setBackground(new java.awt.Color(255, 255, 255));
        btnUpLocal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vn/spring/WOW/AMt/pics/up.png")));
        btnUpLocal.setToolTipText("Up");
        btnUpLocal.setMargin(new java.awt.Insets(2, 2, 2, 2));
        btnUpLocal.setMaximumSize(new java.awt.Dimension(27, 25));
        btnUpLocal.setMinimumSize(new java.awt.Dimension(27, 25));
        btnUpLocal.setPreferredSize(new java.awt.Dimension(27, 25));
        btnUpLocal.setEnabled(false);
        btnUpLocal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpLocalActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
        pnlLocalButtons.add(btnUpLocal, gridBagConstraints);

        btnHomeLocal.setBackground(new java.awt.Color(255, 255, 255));
        btnHomeLocal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vn/spring/WOW/AMt/pics/home.png")));
        btnHomeLocal.setToolTipText("Local Home");
        btnHomeLocal.setMargin(new java.awt.Insets(2, 2, 2, 2));
        btnHomeLocal.setMaximumSize(new java.awt.Dimension(27, 25));
        btnHomeLocal.setMinimumSize(new java.awt.Dimension(27, 25));
        btnHomeLocal.setPreferredSize(new java.awt.Dimension(27, 25));
        btnHomeLocal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHomeLocalActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
        pnlLocalButtons.add(btnHomeLocal, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        pnlButtons.add(pnlLocalButtons, gridBagConstraints);

        pnlRemoteButtons.setLayout(new java.awt.GridBagLayout());

        pnlRemoteButtons.setBackground(new java.awt.Color(255, 255, 255));
        btnHomeRemote.setBackground(new java.awt.Color(255, 255, 255));
        btnHomeRemote.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vn/spring/WOW/AMt/pics/home.png")));
        btnHomeRemote.setToolTipText("Remote Home");
        btnHomeRemote.setMargin(new java.awt.Insets(2, 2, 2, 2));
        btnHomeRemote.setMaximumSize(new java.awt.Dimension(27, 25));
        btnHomeRemote.setMinimumSize(new java.awt.Dimension(27, 25));
        btnHomeRemote.setPreferredSize(new java.awt.Dimension(27, 25));
        btnHomeRemote.setEnabled(false);
        btnHomeRemote.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHomeRemoteActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
        pnlRemoteButtons.add(btnHomeRemote, gridBagConstraints);

        btnUpRemote.setBackground(new java.awt.Color(255, 255, 255));
        btnUpRemote.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vn/spring/WOW/AMt/pics/up.png")));
        btnUpRemote.setToolTipText("Up");
        btnUpRemote.setMargin(new java.awt.Insets(2, 2, 2, 2));
        btnUpRemote.setMaximumSize(new java.awt.Dimension(27, 25));
        btnUpRemote.setMinimumSize(new java.awt.Dimension(27, 25));
        btnUpRemote.setPreferredSize(new java.awt.Dimension(27, 25));
        btnUpRemote.setEnabled(false);
        btnUpRemote.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpRemoteActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 9;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
        pnlRemoteButtons.add(btnUpRemote, gridBagConstraints);

        btnRefreshRemote.setBackground(new java.awt.Color(255, 255, 255));
        btnRefreshRemote.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vn/spring/WOW/AMt/pics/refresh.png")));
        btnRefreshRemote.setToolTipText("Refresh Remote");
        btnRefreshRemote.setMargin(new java.awt.Insets(2, 2, 2, 2));
        btnRefreshRemote.setMaximumSize(new java.awt.Dimension(27, 25));
        btnRefreshRemote.setMinimumSize(new java.awt.Dimension(27, 25));
        btnRefreshRemote.setPreferredSize(new java.awt.Dimension(27, 25));
        btnRefreshRemote.setEnabled(false);
        btnRefreshRemote.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshRemoteActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 10;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
        pnlRemoteButtons.add(btnRefreshRemote, gridBagConstraints);

        jSeparator13.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator13.setMaximumSize(new java.awt.Dimension(10, 25));
        jSeparator13.setMinimumSize(new java.awt.Dimension(10, 25));
        jSeparator13.setPreferredSize(new java.awt.Dimension(10, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 11;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
        pnlRemoteButtons.add(jSeparator13, gridBagConstraints);

        btnNewFolderRemote.setBackground(new java.awt.Color(255, 255, 255));
        btnNewFolderRemote.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vn/spring/WOW/AMt/pics/newfolder.png")));
        btnNewFolderRemote.setToolTipText("New Remote Application");
        btnNewFolderRemote.setMargin(new java.awt.Insets(2, 2, 2, 2));
        btnNewFolderRemote.setMaximumSize(new java.awt.Dimension(27, 25));
        btnNewFolderRemote.setMinimumSize(new java.awt.Dimension(27, 25));
        btnNewFolderRemote.setPreferredSize(new java.awt.Dimension(27, 25));
        btnNewFolderRemote.setEnabled(false);
        btnNewFolderRemote.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewFolderRemoteActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 12;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
        pnlRemoteButtons.add(btnNewFolderRemote, gridBagConstraints);

        btnDelRemote.setBackground(new java.awt.Color(255, 255, 255));
        btnDelRemote.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vn/spring/WOW/AMt/pics/delete.png")));
        btnDelRemote.setToolTipText("Delete Remote");
        btnDelRemote.setMargin(new java.awt.Insets(2, 2, 2, 2));
        btnDelRemote.setMaximumSize(new java.awt.Dimension(27, 25));
        btnDelRemote.setMinimumSize(new java.awt.Dimension(27, 25));
        btnDelRemote.setPreferredSize(new java.awt.Dimension(27, 25));
        btnDelRemote.setEnabled(false);
        btnDelRemote.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelRemoteActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 13;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
        pnlRemoteButtons.add(btnDelRemote, gridBagConstraints);

        txtPathRemote.setMaximumSize(new java.awt.Dimension(9999, 25));
        txtPathRemote.setMinimumSize(new java.awt.Dimension(10, 25));
        txtPathRemote.setPreferredSize(new java.awt.Dimension(150, 25));
        txtPathRemote.setEnabled(false);
        txtPathRemote.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPathRemoteActionPerformed(evt);
            }
        });
        txtPathRemote.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtPathRemoteFocusGained(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 14;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
        pnlRemoteButtons.add(txtPathRemote, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        pnlButtons.add(pnlRemoteButtons, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 20;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        gridBagConstraints.weightx = 1.0;
        add(pnlButtons, gridBagConstraints);

        splFileInfo.setBorder(null);
        splFileInfo.setDividerLocation(350);
        splFileInfo.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        splLocalRemote.setBorder(null);
        splLocalRemote.setDividerLocation(350);
        splLocalRemote.setPreferredSize(new java.awt.Dimension(700, 350));
        pnlLocal.setLayout(new java.awt.BorderLayout());

        spnLocal.setBackground(new java.awt.Color(255, 255, 255));
        spnLocal.setBorder(null);
        triLocal.setDragEnabled(true);
        triLocal.setEditable(true);
        triLocal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                triLocalFocusGained(evt);
            }
        });
        triLocal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                triLocalMouseClicked(evt);
            }
        });
        triLocal.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                triLocalValueChanged(evt);
            }
        });

        spnLocal.setViewportView(triLocal);

        pnlLocal.add(spnLocal, java.awt.BorderLayout.CENTER);

        lblLocal.setFont(new java.awt.Font("Dialog", 0, 12));
        lblLocal.setText(" Local");
        lblLocal.setMaximumSize(new java.awt.Dimension(30, 20));
        lblLocal.setMinimumSize(new java.awt.Dimension(30, 20));
        lblLocal.setPreferredSize(new java.awt.Dimension(30, 20));
        pnlLocal.add(lblLocal, java.awt.BorderLayout.NORTH);

        splLocalRemote.setLeftComponent(pnlLocal);

        pnlRemote.setLayout(new java.awt.CardLayout());

        lblRemoteInfo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblRemoteInfo.setText("Not logged in");
        pnlRemote.add(lblRemoteInfo, "tabInfo");

        tabRemote.setFont(new java.awt.Font("Dialog", 0, 12));
        tabRemote.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tabRemoteStateChanged(evt);
            }
        });

        pnlAppFiles.setLayout(new java.awt.BorderLayout());

        spnRemoteAppFiles.setBackground(new java.awt.Color(255, 255, 255));
        spnRemoteAppFiles.setBorder(null);
        triRemote.setBackground(new java.awt.Color(204, 204, 204));
        triRemote.setDragEnabled(true);
        triRemote.setEditable(true);
        triRemote.setEnabled(false);
        triRemote.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                triRemoteFocusGained(evt);
            }
        });
        triRemote.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                triRemoteMouseClicked(evt);
            }
        });
        triRemote.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                triRemoteValueChanged(evt);
            }
        });

        spnRemoteAppFiles.setViewportView(triRemote);

        pnlAppFiles.add(spnRemoteAppFiles, java.awt.BorderLayout.CENTER);

        tabRemote.addTab("Application Files", pnlAppFiles);

        pnlAuthorFiles.setLayout(new java.awt.BorderLayout());

        spnRemoteAuthorFiles.setBackground(new java.awt.Color(255, 255, 255));
        spnRemoteAuthorFiles.setBorder(null);
        pnlAuthorFiles.add(spnRemoteAuthorFiles, java.awt.BorderLayout.CENTER);

        tabRemote.addTab("Author Files", pnlAuthorFiles);

        pnlRemote.add(tabRemote, "tabFiles");

        splLocalRemote.setRightComponent(pnlRemote);

        splFileInfo.setLeftComponent(splLocalRemote);

        pnlInfo.setLayout(new java.awt.GridLayout(1, 0));

        pnlInfo.setBackground(new java.awt.Color(255, 255, 255));
        pnlInfo.setBorder(new javax.swing.border.TitledBorder(null, "Info", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12)));
        pnlInfo.setPreferredSize(new java.awt.Dimension(720, 120));
        spnInfo.setBackground(new java.awt.Color(255, 255, 255));
        spnInfo.setBorder(null);
        pnlInfo.add(spnInfo);

        splFileInfo.setRightComponent(pnlInfo);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 20;
        gridBagConstraints.gridheight = 80;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(splFileInfo, gridBagConstraints);

    }//GEN-END:initComponents

    private void pmniSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pmniSaveActionPerformed
        // Add your handling code here:
    }//GEN-LAST:event_pmniSaveActionPerformed

    /**
     * Shows the changeprofile dialog in a new frame
     * @param evt the event that triggered this action.
     */
    private void mniChangeProfileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniChangeProfileActionPerformed
      AuthorEdit dlg = new AuthorEdit(FAuthorname, AMt, FParent, true);

      dlg.setVisible(true);
    }//GEN-LAST:event_mniChangeProfileActionPerformed

    /**
     * Starts the TestEditor
     * @param the event that triggered this action.
     */
    private void mniTestEditorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniTestEditorActionPerformed
      setWaitCursor();

      Thread t = new Thread() {
        public void run() {
          //start TestEditor
          new TestEditorApplet(AMtc.SERVERURL, FAuthorname);
          setDefaultCursor();
        }
      };

      t.start();
    }//GEN-LAST:event_mniTestEditorActionPerformed

    /**
     * Refreshes remote or local view, depending on which tree has the focus.
     * @param evt The event that triggered this action
     */
    private void mniRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniRefreshActionPerformed
      if (focusLocal)
        btnRefreshLocalActionPerformed(evt);
      else
        btnRefreshRemoteActionPerformed(evt);
    }//GEN-LAST:event_mniRefreshActionPerformed

    /**
     * Calls mniPasteActionPerformed(evt)
     * @param evt the event that triggered this action
     */
    private void pmniPasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pmniPasteActionPerformed
      mniPasteActionPerformed(evt);
    }//GEN-LAST:event_pmniPasteActionPerformed

    /**
     * Calls mniCopyActionPerformed(evt)
     * @param evt the event that triggered this action
     */
    private void pmniCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pmniCopyActionPerformed
      mniCopyActionPerformed(evt);
    }//GEN-LAST:event_pmniCopyActionPerformed

    /**
     * Handles focusgained events in triRemote
     * @evt the event that triggered this action
     */
    private void triRemoteFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_triRemoteFocusGained
      //System.out.println("focus in triRemote");
      focusLocal = false;

      triLocal.clearSelection();
      tblInfo.clearSelection();
    }//GEN-LAST:event_triRemoteFocusGained

    /**
     * Handles focusgained events in triLocal
     * @evt the event that triggered this action
     */
    private void triLocalFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_triLocalFocusGained
      //System.out.println("focus in triLocal");
      focusLocal = true;

      triRemote.clearSelection();
      tblInfo.clearSelection();
    }//GEN-LAST:event_triLocalFocusGained

    /**
     * Opens the selected file in triRemote with the FormEditor in a new Thread.
     * @evt the event that triggered this action
     */
    private void mniOpenFrmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniOpenFrmActionPerformed
      DefaultMutableTreeNode node = (DefaultMutableTreeNode)triRemote.getLastSelectedPathComponent();
      if (node == null) return;

      TAMtFile f = (TAMtFile)node.getUserObject();
      final String filename = f.getName();
      final String filepath = f.getPath();
      final int filemode = remoteTreeMode;

      setWaitCursor();
      Thread t = new Thread() {
        public void run() {
          //start FormEditor with selected file
          new FormEditorApplet(AMtc.SERVERURL, FAuthorname, filename, filepath,
                                                                      filemode);
          setDefaultCursor();
        }
      };

      t.start();
    }//GEN-LAST:event_mniOpenFrmActionPerformed

    /**
     * Opens the selected file in triRemote with the FormEditor in a new Thread.
     * @evt the event that triggered this action
     */
    private void mniOpenTestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniOpenTestActionPerformed
      DefaultMutableTreeNode node = (DefaultMutableTreeNode)triRemote.getLastSelectedPathComponent();
      if (node == null) return;

      setWaitCursor();
      Thread t = new Thread() {
        public void run() {
          new TestEditorApplet(AMtc.SERVERURL, FAuthorname);
          setDefaultCursor();
        }
      };

      t.start();
    }//GEN-LAST:event_mniOpenTestActionPerformed

    /** Opens the selected file in triRemote with the ConceptEditor in a new
     *  Thread.
     * @param evt the event that triggered this action
     */
    private void mniOpenWowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniOpenWowActionPerformed
      DefaultMutableTreeNode node = (DefaultMutableTreeNode)triRemote.getLastSelectedPathComponent();
      if (node == null) return;

      TAMtFile f = (TAMtFile)node.getUserObject();

      //add .wow if the file does not end with .wow (in case of opening .wow file
      //from application rightclick
      final String appname =
        f.getName().endsWith(".wow")?
          f.getName().substring(0, f.getName().lastIndexOf(".wow")):
          f.getName();

      setWaitCursor();
      Thread t = new Thread() {
        public void run() {
          openWowFile(FAuthorname, appname);
          setDefaultCursor();
        }
      };

      t.start();
    }//GEN-LAST:event_mniOpenWowActionPerformed

    /**
     * Opens the selected file in triRemote with the GraphAuthor in a new
     * Thread.
     * Calls mniOpenGafActionPerformed(evt).
     * @param evt the event that triggered this action
     */
    private void mniOpenGafActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniOpenGafActionPerformed
      DefaultMutableTreeNode node = (DefaultMutableTreeNode)triRemote.getLastSelectedPathComponent();
      if (node == null) return;

      TAMtFile f = (TAMtFile)node.getUserObject();

      //add .gaf if the file does not end with .gaf (in case of opening .gaf
      //file from application rightclick
      final String appname =
        f.getName().endsWith(".gaf")?
          f.getName().substring(0, f.getName().lastIndexOf(".gaf")):
          f.getName();

      setWaitCursor();
      Thread t = new Thread() {
        public void run() {
          openGafFile(FAuthorname, appname);
          setDefaultCursor();
        }
      };

      t.start();
    }//GEN-LAST:event_mniOpenGafActionPerformed

    private void mniOpenBifActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniOpenGafActionPerformed
        DefaultMutableTreeNode node = (DefaultMutableTreeNode)triRemote.getLastSelectedPathComponent();
        if (node == null) return;

        TAMtFile f = (TAMtFile)node.getUserObject();

        //add .gaf if the file does not end with (in case of opening
        //file from application rightclick
        final String appname =
          f.getName().endsWith(OverlayBayesUM.OBUM_EXT)?
            f.getName().substring(0, f.getName().lastIndexOf(OverlayBayesUM.OBUM_EXT)):
            f.getName();

        setWaitCursor();
        Thread t = new Thread() {
          public void run() {
            openBifFile(FAuthorname, appname);
            setDefaultCursor();
          }
        };

        t.start();
      }//GEN-LAST:event_mniOpenBifActionPerformed

    /**
     * Starts the FormEditor in a new thread for the currently logged in author.
     * @param evt the event that triggered this action.
     */
    private void mniFormEditorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniFormEditorActionPerformed
      setWaitCursor();

      Thread t = new Thread() {
        public void run() {
          //start FormEditor
          new FormEditorApplet(AMtc.SERVERURL, FAuthorname);
          setDefaultCursor();
        }
      };

      t.start();
    }//GEN-LAST:event_mniFormEditorActionPerformed

    /**
     * Starts the ConceptEditor in a new thread for the currently logged in author.
     * @param evt the event that triggered this action.
     */
    private void mniConceptEditorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniConceptEditorActionPerformed
      setWaitCursor();
      Thread t = new Thread() {
        public void run() {
          //start ConceptEditor
          if (!EditorApplet.isOpen()) new EditorApplet(AMtc.SERVERURL, FAuthorname); else {
                JOptionPane.showMessageDialog(null,
                                              "Concept Editor is already open",
                                              "information",
                                              JOptionPane.OK_OPTION);
          }
          setDefaultCursor();
        }
      };

      t.start();
    }//GEN-LAST:event_mniConceptEditorActionPerformed

    /**
     * Starts the GraphAuthor in a new thread for the currently logged in author.
     * @param evt the event that triggered this action.
     */
    private void mniGraphAuthorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniGraphAuthorActionPerformed
      setWaitCursor();

      Thread t = new Thread() {
        public void run() {
          //start GraphAuthor
          if (noOpenGA()) new GraphAuthor(AMtc.SERVERURL, FAuthorname, true); else {
                JOptionPane.showMessageDialog(null,
                                              "Graph Author is already open",
                                              "information",
                                              JOptionPane.OK_OPTION);
          }
          setDefaultCursor();
        }
      };

      t.start();
    }//GEN-LAST:event_mniGraphAuthorActionPerformed

    private void mniBayesAuthorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniGraphAuthorActionPerformed
        setWaitCursor();

        Thread t = new Thread() {
          public void run() {
            //start BayesAuthor
        	try {
                new OverlayBayesInspector(AMtc.SERVERURL, FAuthorname, null, OverlayBayesUM.OBUM_DEFAULT_BAYESNET_TYPE);
                setDefaultCursor();
        		
        	}
        	catch(Exception e) {
        		
        	}
          }
        };

        t.start();
      }//GEN-LAST:event_mniGraphAuthorActionPerformed

    private boolean noOpenGA() {
        if (GraphAuthor.myinstance == null) return true;
        return !GraphAuthor.myinstance.isOpen();
    }

    /**
     * Responds to statechanges in the selected tab of tabRemote.
     * @param evt the event that triggered this action
     */
    private void tabRemoteStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tabRemoteStateChanged
      if (!loggedin) return;

      Component c = tabRemote.getSelectedComponent();

      if (c == null) return;

      if (c.equals(pnlAuthorFiles)) {//set authorfiles tab
        remoteTreeMode = AMtc.AUTHOR_FILES_MODE;
        spnRemoteAuthorFiles.setViewportView(triRemote);
      }
      else if (c.equals(pnlAppFiles)) {//set appfiles tab
        remoteTreeMode = AMtc.APP_FILES_MODE;
        spnRemoteAppFiles.setViewportView(triRemote);
      }

      if (remoteRoot == null) return;
      //switch remote root and list files
      TAMtFile f = (TAMtFile)secRemoteRoot.clone();
      secRemoteRoot = (TAMtFile)remoteRoot.clone();
      remoteRoot = f;

      listFilesRemote(remoteRoot, remoteTreeMode);
    }//GEN-LAST:event_tabRemoteStateChanged

    /**
     * Calls mniOpenFrmActionPerformed(evt).
     * @param evt the event that triggered this action
     */
    private void pmniOpenFrmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pmniOpenFrmActionPerformed
      mniOpenFrmActionPerformed(null);
    }//GEN-LAST:event_pmniOpenFrmActionPerformed

    /**
     * Calls mniOpenTestActionPerformed(evt).
     * @param evt the event that triggered this action
     */
    private void pmniOpenTestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pmniOpenTestActionPerformed
      mniOpenTestActionPerformed(null);
    }//GEN-LAST:event_pmniOpenTestActionPerformed

    /**
     * Deletes the applications domain model from WOW!.
     * @param evt the event that triggered this action
     */
    private void pmniDeleteDomainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pmniDeleteDomainActionPerformed
      int error = AMtc.NO_ERRORS;
      TreePath[] selpaths = triRemote.getSelectionPaths();
      if (selpaths == null) return;

      //ask user for confirmation
      if (JOptionPane.showConfirmDialog(this, AMtc.MESSAGE_DEL_DOMAIN_CONFIRMATION,
        AMtc.MESSAGE_HEADER_CONFIRM, JOptionPane.YES_NO_OPTION)
           == JOptionPane.NO_OPTION)
        return;

      //user confirmed
      for (int i = 0;i<selpaths.length ;i++ ) {
        DefaultMutableTreeNode node = (DefaultMutableTreeNode)selpaths[i].getLastPathComponent();
        if (node == null) return;
        TAMtFile f = (TAMtFile)node.getUserObject();

        if (f.isApp()) {//application selected
          int j = AMt.delAppDomain(f.getName());
          if (j != AMtc.NO_ERRORS) {error = j; break;}
        }
      }
      showError(error);
      btnRefreshRemoteActionPerformed(null);
    }//GEN-LAST:event_pmniDeleteDomainActionPerformed

    /**
     * Calls mniOpenWowActionPerformed(evt).Opens the selected file in triRemote with the ConceptEditor in a new
     * Thread.
     * @param evt the event that triggered this action
     */
    private void pmniOpenWowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pmniOpenWowActionPerformed
      mniOpenWowActionPerformed(evt);
    }//GEN-LAST:event_pmniOpenWowActionPerformed

    /**
     * Opens the selected file in triRemote with the GraphAuthor in a new
     * Thread.
     * Calls mniOpenGafActionPerformed(evt).
     * @param evt the event that triggered this action
     */
    private void pmniOpenGafActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pmniOpenGafActionPerformed
      mniOpenGafActionPerformed(evt);
    }//GEN-LAST:event_pmniOpenGafActionPerformed

    private void pmniOpenBifActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pmniOpenBifActionPerformed
        mniOpenBifActionPerformed(evt);
      }//GEN-LAST:event_pmniOpenGafActionPerformed

    /**
     * Calls btnHomeRemoteActionPerformed(evt)
     * @param evt the event that triggered this action
     */
    private void pmniHomeRemoteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pmniHomeRemoteActionPerformed
      btnHomeRemoteActionPerformed(evt);
    }//GEN-LAST:event_pmniHomeRemoteActionPerformed

    /**
     * Calls btnDelRemoteActionPerformed(evt)
     * @param evt the event that triggered this action
     */
    private void pmniDeleteRemoteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pmniDeleteRemoteActionPerformed
      btnDelRemoteActionPerformed(evt);
    }//GEN-LAST:event_pmniDeleteRemoteActionPerformed

    /**
     * Calls btnNewFolderRemoteActionPerformed(evt)
     * @param evt the event that triggered this action
     */
    private void pmniNewFolderRemoteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pmniNewFolderRemoteActionPerformed
      btnNewFolderRemoteActionPerformed(evt);
    }//GEN-LAST:event_pmniNewFolderRemoteActionPerformed

    /**
     * Starts editing at the selected file in triRemote
     * @param evt the event that triggered this action
     */
    private void pmniRenameRemoteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pmniRenameRemoteActionPerformed
      triRemote.startEditingAtPath(triRemote.getSelectionPath());
    }//GEN-LAST:event_pmniRenameRemoteActionPerformed

    /**
     * Calls btnUpRemoteActionPerformed(evt)
     * @param evt the event that triggered this action
     */
    private void pmniUpRemoteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pmniUpRemoteActionPerformed
      btnUpRemoteActionPerformed(evt);
    }//GEN-LAST:event_pmniUpRemoteActionPerformed

    /**
     * Calls btnRefreshRemoteActionPerformed(evt)
     * @param evt the event that triggered this action
     */
    private void pmniRefreshRemoteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pmniRefreshRemoteActionPerformed
      btnRefreshRemoteActionPerformed(evt);
    }//GEN-LAST:event_pmniRefreshRemoteActionPerformed

    /**
     * Opens the selected file from either tree triLocal or triRemote, depending
     * on which tree has the focus.
     * If triLocal: the file is opened with the default external application
     * from the system. If the selected file is a directory, then the view in
     * triLocal changes to the path of this directory.
     * If triRemote: a .gaf, .frm or .wow file is opened with the appropriate
     * authoring tool. if the selected file is a directory, then the view in
     * triRemote changes to the path of this directory.
     * @param evt the event that triggered this action
     */
    private void pmniOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pmniOpenActionPerformed
      DefaultMutableTreeNode selnode = (DefaultMutableTreeNode)triLocal.getLastSelectedPathComponent();
      boolean local = true;

      if (selnode == null) {
       selnode = (DefaultMutableTreeNode)triRemote.getLastSelectedPathComponent();
       if (selnode == null) return;
       local = false;
      }

      if (local) {//handle open action on triLocal
        final File f = (File)selnode.getUserObject();

        //if "f" is a directory, change local path to the path of "f"
        //and list files of this directory in triLocal
        if (f.isDirectory())
          listFilesLocal(f);
        else {//run file
          setWaitCursor();
          Thread t = new Thread() {
            public void run() {
              openFile(f.getPath());
              setDefaultCursor();
            }
          };

          t.start();
        }
      }
      else {//handle open action on triRemote
        TAMtFile f = (TAMtFile)selnode.getUserObject();

        //if "f" is a directory, change local path to the path of "f"
        //and list files of this directory in triRemote
        if (f.isDirectory())
          listFilesRemote(f, remoteTreeMode);
        else if (f.getName().endsWith(".frm")) //open frm
          pmniOpenFrmActionPerformed(null);
        else if (f.getName().endsWith(".test")) //open frm
          pmniOpenTestActionPerformed(null);

        else if (remoteTreeMode == AMtc.AUTHOR_FILES_MODE
               && remoteRoot.getPath().equals("/")) {//open gaf or wow
          if (f.getName().endsWith(".wow"))
            pmniOpenWowActionPerformed(null);
          if (f.getName().endsWith(".gaf"))
            pmniOpenGafActionPerformed(null);
          if (f.getName().endsWith(OverlayBayesUM.OBUM_EXT))
              pmniOpenBifActionPerformed(null);
        }
      }
    }//GEN-LAST:event_pmniOpenActionPerformed

    /**
     * Calls btnUpLocalActionPerformed(evt)
     * @param evt the event that triggered this action
     */
    private void pmniUpLocalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pmniUpLocalActionPerformed
      btnUpLocalActionPerformed(evt);
    }//GEN-LAST:event_pmniUpLocalActionPerformed

    /**
     * Calls btnHomeLocalActionPerformed(evt)
     * @param evt the event that triggered this action
     */
    private void pmniHomeLocalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pmniHomeLocalActionPerformed
      btnHomeLocalActionPerformed(evt);
    }//GEN-LAST:event_pmniHomeLocalActionPerformed

    /**
     * Removes all rows from tblInfo. (NOT CORRECTLY IMPLEMENTED YET)
     * @param evt the event that triggered this action
     */
    private void pmniClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pmniClearActionPerformed
      while (tm.getRowCount() != 0) {
        tm.removeRow(0);
      }
    }//GEN-LAST:event_pmniClearActionPerformed

    /**
     * Cancels the current transfer.
     * @param evt the event that triggered this action
     */
    private void pmniCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pmniCancelActionPerformed
      AMt.cancelTransfer();
    }//GEN-LAST:event_pmniCancelActionPerformed

    /**
     * Selects all text in txtPathRemote
     * @param evt The event that triggered this action
     */
    private void txtPathRemoteFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPathRemoteFocusGained
      txtPathRemote.setSelectionStart(0);
      txtPathRemote.setSelectionEnd(txtPathRemote.getText().length());
    }//GEN-LAST:event_txtPathRemoteFocusGained

    /**
     * Selects all text in txtPathLocal
     * @param evt The event that triggered this action
     */
    private void txtPathLocalFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPathLocalFocusGained
      txtPathLocal.setSelectionStart(0);
      txtPathLocal.setSelectionEnd(txtPathLocal.getText().length());
    }//GEN-LAST:event_txtPathLocalFocusGained

    /**
     * Clears the selection in both Trees
     * @param evt The event that triggered this action
     */
    private void tblInfoFocusGained(java.awt.event.FocusEvent evt) {
      triLocal.clearSelection();
      triRemote.clearSelection();
    }

    /**
     * Sets the divider of both splitpanes to the default position.
     * @param evt The event that triggered this action
     */
    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
      splLocalRemote.setDividerLocation(getWidth()/2);
      splFileInfo.setDividerLocation(splFileInfo.getHeight()*3/4);
    }//GEN-LAST:event_formComponentResized

    /**
     * Does nothing. Action for the file->exit menu should be defined in
     * applet entry class. System.exit(0) causes unwanted behaviour,
     * such as closure of the browser window that was used to view the applet.
     * @param evt The event that triggerd this action
     */
    private void mniExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniExitActionPerformed
      //System.exit(0);
    }//GEN-LAST:event_mniExitActionPerformed


    /**
     * Moves local filesystem view to path contained in txtPathLocal textfield.
     * An error message is displayed in a JOptionPane dialog if the path in the
     * textfield is not valid.
     * @param evt The event that triggered this action
     */
    private void txtPathLocalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPathLocalActionPerformed
      String path = txtPathLocal.getText();
      File f = new File(path);
      try {
        f = f.getCanonicalFile();
      }
      catch (Exception e){
        showError(AMtc.ERROR_INVALID_PATH); return;
      }
      if (!f.exists()) { showError(AMtc.ERROR_INVALID_PATH); return;}
      else {//move to path
        listFilesLocal(f);
      }
    }//GEN-LAST:event_txtPathLocalActionPerformed

    /**
     * Moves remote filesystem view to path contained in txtPathRemote textfield.
     * An error message is displayed in a JOptionPane dialog if the path in the
     * textfield is not valid.
     * @param evt The event that triggered this action
     */
    private void txtPathRemoteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPathRemoteActionPerformed
      String path = txtPathRemote.getText();
      path = getCanonicalPath(path);
      if (path == null) {showError(AMtc.ERROR_INVALID_PATH); return;}

      TAMtFile f = new TAMtFile(path, "",true);
      listFilesRemote(f, remoteTreeMode);
    }//GEN-LAST:event_txtPathRemoteActionPerformed

    /**
     * Deletes all selected remote files (files selected in triRemote) after
     * the user has confirmed the operation. States an error message if an
     * error occured.
     * @param evt The event that triggered this action
     */
    private void btnDelRemoteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDelRemoteActionPerformed
      int error = AMtc.NO_ERRORS;
      TreePath[] selpaths = triRemote.getSelectionPaths();
      if (selpaths == null) return;

      //ask user for confirmation
      if (JOptionPane.showConfirmDialog(this, AMtc.MESSAGE_DEL_CONFIRMATION,
        AMtc.MESSAGE_HEADER_CONFIRM, JOptionPane.YES_NO_OPTION)
           == JOptionPane.NO_OPTION)
        return;

      //user confirmed, delete selected files
      for (int i = 0;i<selpaths.length ;i++ ) {
        DefaultMutableTreeNode node = (DefaultMutableTreeNode)selpaths[i].getLastPathComponent();
        if (node == null) return;
        TAMtFile f = (TAMtFile)node.getUserObject();

        if (f.isApp()) {//application selected
          int j = AMt.delApp(f.getName());
          if (j != AMtc.NO_ERRORS) error = j;
        }
        else {//file or folder selected
          int j = AMt.delete(f.getPath(), remoteTreeMode);
          if (j != AMtc.NO_ERRORS) error = j;
        }
      }
      showError(error);
      btnRefreshRemoteActionPerformed(null);
    }//GEN-LAST:event_btnDelRemoteActionPerformed

    /**
     * Adds a new folder in the current view of the remote filesystem.
     * @param evt The event that triggered this action
     */
    private void btnNewFolderRemoteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewFolderRemoteActionPerformed
      String name;

      if (remoteRoot.getPath().equals("/") &&
                                        remoteTreeMode == AMtc.APP_FILES_MODE)
        name = JOptionPane.showInputDialog(this,
          AMtc.MESSAGE_NEW_APP_PROMPT, "New Application");
      else
        name = JOptionPane.showInputDialog(this,
          AMtc.MESSAGE_NEW_FOLDER_PROMPT, "New Folder");

      if (name == null) return;

      if (fileExistsRemote(name, remoteRoot.getPath(), remoteTreeMode)) {
        if (remoteRoot.getPath().equals("/"))
          showError(AMtc.ERROR_APP_ALREADY_EXISTS);
        else
          showError(AMtc.ERROR_FOLDER_ALREADY_EXISTS);
        return;
      }
      int error = addFolderRemote(name, remoteRoot.getPath(), remoteTreeMode);

      showError(error);
      btnRefreshRemoteActionPerformed(null);
    }//GEN-LAST:event_btnNewFolderRemoteActionPerformed

    /**
     * Refreshes the remote view.
     * @param evt The event that triggered this action
     */
    private void btnRefreshRemoteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshRemoteActionPerformed
      listFilesRemote(remoteRoot, remoteTreeMode);
    }//GEN-LAST:event_btnRefreshRemoteActionPerformed

    /**
     * Moves up a folder in the remote view or does nothing if this is
     * impossible.
     * @param evt The event that triggered this action
     */
    private void btnUpRemoteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpRemoteActionPerformed
       if (remoteRoot.equals(getRoot(triRemote))) return;

       String path = remoteRoot.getPath();

       //if returning to root
       if (path.lastIndexOf("/") == 0) {
         TAMtFile f = (TAMtFile)getRoot(triRemote).getUserObject();
         listFilesRemote(f, remoteTreeMode);
         return;
       }

       //returning to path of form: /app/folder
       String name = path.substring(path.lastIndexOf("/")+1);
       path = path.substring(0, path.lastIndexOf("/"));

       TAMtFile f = new TAMtFile(path,name,true);
       listFilesRemote(f, remoteTreeMode);
    }//GEN-LAST:event_btnUpRemoteActionPerformed

    /**
     * Moves to the home directory in the remote view.
     * @param evt The event that triggered this action
     */
    private void btnHomeRemoteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHomeRemoteActionPerformed
      TAMtFile f = (TAMtFile)getRoot(triRemote).getUserObject();
      listFilesRemote(f, remoteTreeMode);
    }//GEN-LAST:event_btnHomeRemoteActionPerformed

    /**
     * Deletes all selected local files (files selected in triLocal) after
     * the user has confirmed the operation. States an error message if an
     * error occured.
     * @param evt The event that triggered this action
     */
    private void btnDelLocalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDelLocalActionPerformed
      int error = AMtc.NO_ERRORS;
      TreePath[] selpaths = triLocal.getSelectionPaths();
      if (selpaths == null) return;

      //ask user for confirmation
      if (JOptionPane.showConfirmDialog(this, AMtc.MESSAGE_DEL_CONFIRMATION,
        AMtc.MESSAGE_HEADER_CONFIRM, JOptionPane.YES_NO_OPTION)
           == JOptionPane.NO_OPTION)
        return;

      //user confirmed, delete files
      for (int i = 0;i<selpaths.length ;i++ ) {
        DefaultMutableTreeNode node = (DefaultMutableTreeNode)selpaths[i].getLastPathComponent();
        if (node == null) return;
        File f = (File)node.getUserObject();

        if (f.isDirectory()) {
          int j = rmDir(f);
          if (j != AMtc.NO_ERRORS) error = j;
        }
        else if (!f.delete()) error = AMtc.ERROR_COULD_NOT_DELETE_FILE;
      }

      showError(error);
      btnRefreshLocalActionPerformed(null);
    }//GEN-LAST:event_btnDelLocalActionPerformed

    /**
     * Adds a new folder in the current view of the  local filesystem.
     * @param evt The event that triggered this action
     */
    private void btnNewFolderLocalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewFolderLocalActionPerformed
      String name = JOptionPane.showInputDialog(this,
        AMtc.MESSAGE_NEW_FOLDER_PROMPT, "New Folder");

      //validate name of new map
      if (name == null) return;
      if (name.equals("")) name = "New Folder";
      if (!validFileName(name)) {
        showError(AMtc.ERROR_ILLEGAL_CHARS_IN_FILENAME); return;
      }

      File f = new File(localRoot.getPath() + File.separator + name);

      if (f.exists()) {
        showError(AMtc.ERROR_FOLDER_ALREADY_EXISTS); return;
      }

      if (!f.exists() && !f.mkdir()) {
        showError(AMtc.ERROR_COULD_NOT_CREATE_DIR); return;
      }
      btnRefreshLocalActionPerformed(null);
    }//GEN-LAST:event_btnNewFolderLocalActionPerformed

    /**
     * Refreshes the local view.
     * @param evt The event that triggered this action
     */
    private void btnRefreshLocalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshLocalActionPerformed
      listFilesLocal(localRoot);
    }//GEN-LAST:event_btnRefreshLocalActionPerformed

    /**
     * Moves up a folder in the local view or does nothing if this is
     * impossible.
     * @param evt The event that triggered this action
     */
    private void btnUpLocalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpLocalActionPerformed
       if (localRoot == null) return;

       localRoot = localRoot.getParentFile();

       if (localRoot == null) {//show all filesystem roots
         showLocalFileSystemRoots();
       }
       else {//show files of this folder
         listFilesLocal(localRoot);
       }
    }//GEN-LAST:event_btnUpLocalActionPerformed

    /**
     * Moves to the home directory in the local view
     * @param evt The event that triggered this action
     */
    private void btnHomeLocalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHomeLocalActionPerformed
      showLocalStartDir();
    }//GEN-LAST:event_btnHomeLocalActionPerformed

    /**
     * Starts a new thread with a login dialog box.
     * @param evt The event that triggered this action
     */
    private void mniLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniLoginActionPerformed
      //create logindialog in other thread.
      //this is necessary, to allow this thread to read files from harddisk
      //(needed for treecellrenderer)
      setWaitCursor();
      LoginDialogThread t = new LoginDialogThread();
      t.start();
    }//GEN-LAST:event_mniLoginActionPerformed

    /**
     * Calls btnDelLocalActionPerformed(evt)
     * @param evt the event that triggered this action
     */
    private void pmniDeleteLocalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pmniDeleteLocalActionPerformed
      btnDelLocalActionPerformed(evt);
    }//GEN-LAST:event_pmniDeleteLocalActionPerformed

    /**
     * Starts editing at the selected node of triLocal
     * @param evt the event that triggered this action
     */
    private void pmniRenameLocalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pmniRenameLocalActionPerformed
      triLocal.startEditingAtPath(triLocal.getSelectionPath());
    }//GEN-LAST:event_pmniRenameLocalActionPerformed

    /**
     * Calls btnNewFolderLocalActionPerformed(evt)
     * @param evt the event that triggered this action
     */
    private void pmniNewFolderLocalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pmniNewFolderLocalActionPerformed
      btnNewFolderLocalActionPerformed(evt);
    }//GEN-LAST:event_pmniNewFolderLocalActionPerformed

    /**
     * Calls btnRefreshLocalActionPerformed(evt)
     * @param evt the event that triggered this action
     */
    private void pmniRefreshLocalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pmniRefreshLocalActionPerformed
      btnRefreshLocalActionPerformed(evt);
    }//GEN-LAST:event_pmniRefreshLocalActionPerformed

    /**
     * Calls mniDownloadActionPerformed(evt)
     * @param evt the event that triggered this action
     */
    private void pmniDownloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pmniDownloadActionPerformed
      mniDownloadActionPerformed(evt);
    }//GEN-LAST:event_pmniDownloadActionPerformed

    /**
     * Calls mniUploadActionPerformed(evt)
     * @param evt the event that triggered this action
     */
    private void pmniUploadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pmniUploadActionPerformed
      mniUploadActionPerformed(evt);
    }//GEN-LAST:event_pmniUploadActionPerformed

    /**
     * Calls mniCCCActionPerformed(evt)
     * @param evt the event that triggered this action
     */
    private void pmniCCCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pmniCCCActionPerformed
      mniCCCActionPerformed(evt);
    }//GEN-LAST:event_pmniCCCActionPerformed

    /**
     * Shows the aboutbox in a JOptionPane Popup.
     * @param evt The event that triggered this action
     */
    private void mniAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniAboutActionPerformed
      JOptionPane.showMessageDialog(this, AMtc.MESSAGE_ABOUTBOX,
        AMtc.MESSAGE_HEADER_INFO, JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_mniAboutActionPerformed

    /**
     * Deletes all selected files in either triLocal or triRemote after user
     * confirmation.
     * @param evt The event that triggered this action
     */
    private void mniDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniDeleteActionPerformed
      if (btnDelRemote.isEnabled())
        btnDelRemoteActionPerformed(evt);
      else if (btnDelLocal.isEnabled())
        btnDelLocalActionPerformed(evt);
    }//GEN-LAST:event_mniDeleteActionPerformed

    /**
     * Starts editing at the selected file in either tree triLocal or triRemote,
     * depending on which tree has the focus.
     * @param evt The event that triggered this action
     */
    private void mniRenameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniRenameActionPerformed
      TreePath locsel = triLocal.getSelectionPath();
      TreePath remsel = triRemote.getSelectionPath();

      if (locsel != null)
        triLocal.startEditingAtPath(locsel);
      else if (remsel != null)
        triRemote.startEditingAtPath(remsel);
    }//GEN-LAST:event_mniRenameActionPerformed

    /**
     * Creates a new folder in either triLocal or triRemote, depending on the
     * focus. The user is prompted to enter the name of the folder.
     * @param evt the event that triggered this action
     */
    private void mniNewFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniNewFolderActionPerformed
      if (focusLocal)
        btnNewFolderLocalActionPerformed(null);
      else
        btnNewFolderRemoteActionPerformed(null);
    }//GEN-LAST:event_mniNewFolderActionPerformed

    /**
     * Downloads all selected files in the remote view (triRemote) to the
     * current dir in triLocal. Also refreshes the view.
     * @param evt The event that triggered this action
     */
    private void mniDownloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniDownloadActionPerformed
      if (localRoot == null) return;//can not download to system root
      TreePath[] selfiles = triRemote.getSelectionPaths();
      if (selfiles == null) return;

      TAMtFile[] files = new TAMtFile[selfiles.length];

      for (int i = 0;i<selfiles.length ;i++) {//download selected files
        DefaultMutableTreeNode node = (DefaultMutableTreeNode)selfiles[i].getLastPathComponent();
        TAMtFile f = (TAMtFile)node.getUserObject();

        files[i] = f;
      }

      //add operation to TransferThread queue
      DownloadOperation dop = new DownloadOperation(files, localRoot.getPath(), remoteTreeMode);
      transfer.addOperation(dop);
    }//GEN-LAST:event_mniDownloadActionPerformed

    /**
     * Uploads all selected files in the local view (triLocal) to the
     * current dir in triRemote. Also refreshes the view.
     * @param evt The event that triggered this action
     */
    private void mniUploadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniUploadActionPerformed
      TreePath[] selfiles = triLocal.getSelectionPaths();
      if (selfiles == null) return;

      File[] files = new File[selfiles.length];


      for (int i = 0;i<selfiles.length ;i++) {
        DefaultMutableTreeNode node = (DefaultMutableTreeNode)selfiles[i].getLastPathComponent();
        File f = (File)node.getUserObject();

        files[i] = f;
      }

      //add operation to TransferThread queue
      UploadOperation uop = new UploadOperation(files, remoteRoot.getPath(), remoteTreeMode);
      transfer.addOperation(uop);
    }//GEN-LAST:event_mniUploadActionPerformed

    /**
     * Performes a CCC (concept consistency check) for the selected application
     * in the remote view. Does nothing if no application is selected.
     * The Report is shown in a new JFrame, which runs in a seperate Thread.
     * @param evt The event that triggered this action
     */
    private void mniCCCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniCCCActionPerformed
      final DefaultMutableTreeNode node =
        (DefaultMutableTreeNode)triRemote.getLastSelectedPathComponent();
      if (node == null) return;
      if (!remoteRoot.getPath().equals("/")) return;

      TAMtFile f = (TAMtFile)node.getUserObject();
      String s;
      if (f.isApp()) {
        s = f.getName();
      }
      else if (f.getName().endsWith(".gaf")) {
        s = f.getName().substring(0, f.getName().lastIndexOf(".gaf"));
      }
      else if (f.getName().endsWith(".wow")) {
        s = f.getName().substring(0, f.getName().lastIndexOf(".wow"));
      }
      else return;

      final String name = s;

      final CCCPopup c = new CCCPopup((TCCCPopupInterface)gui, FAuthorname, name);
      c.setBusy();
      c.setVisible(true);

      Thread t = new Thread() {
        public void run() {
          TCCCReport rep = AMt.CCC(name);

          //show report
          c.showReport(rep);
          c.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
      };

      t.start();

    }//GEN-LAST:event_mniCCCActionPerformed

    /**
     * pastes files on local clipboard
     * @param evt the event that triggered this action
     */
    private void mniPasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniPasteActionPerformed
      if (copydata == null) return;
      if (copydata.length == 0) return;
      boolean localFiles = (copydata[0] instanceof File);

      if (focusLocal) {//paste in triLocal
        if (localFiles) {//copy locally
          Thread t = new Thread() {
            public void run() {
              CopyLocalOperation cop = new CopyLocalOperation((File[])copydata, localRoot.getPath());
              cop.execute();
            }
          };
          t.start();
        }
        else {//download files
          DownloadOperation dop = new DownloadOperation((TAMtFile[])copydata, localRoot.getPath(), copyfilemode);
          transfer.addOperation(dop);
        }
      }
      else {//paste in triRemote
        if (!localFiles) {//copy remotely
          Thread t = new Thread() {
            public void run() {
              CopyRemoteOperation cop = new CopyRemoteOperation((TAMtFile[])copydata, remoteRoot.getPath(), copyfilemode, remoteTreeMode);
              cop.execute();
            }
          };
          t.start();
        }
        else {//upload files
          UploadOperation uop = new UploadOperation((File[])copydata, remoteRoot.getPath(), remoteTreeMode);
          transfer.addOperation(uop);
        }
      }

    }//GEN-LAST:event_mniPasteActionPerformed

    /**
     * copies selected files to local clipboard
     * @param evt the event that triggered this action
     */
    private void mniCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniCopyActionPerformed
      TreePath[] selpaths = triLocal.getSelectionPaths();
      if (selpaths == null) {
        selpaths = triRemote.getSelectionPaths();
        if (selpaths == null) return;
        else copyfilemode = remoteTreeMode;
      }

      if (focusLocal) copydata = new File[selpaths.length];
      else copydata = new TAMtFile[selpaths.length];

      //copy selected files
      for (int i = 0;i<selpaths.length ;i++ ) {
        DefaultMutableTreeNode node = (DefaultMutableTreeNode)selpaths[i].getLastPathComponent();
        if (node == null) return;
        Object o = node.getUserObject();

        copydata[i] = o;
      }

      mniPaste.setEnabled(true);
    }//GEN-LAST:event_mniCopyActionPerformed

    /**
     * does nothing
     * @param evt the event that triggered this action
     */
    /**
     * Logs out the author. Access to server filesystem is denied.
     * @param evt The event that triggered this action
     */
    private void mniLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniLogoutActionPerformed
      emptyTree(triRemote);
      tmRemote.reload();

      triRemote.setEnabled(false);
      triRemote.setBackground(new java.awt.Color(204,204,204));
      mniChangeProfile.setEnabled(false);
      mniLogout.setEnabled(false);

      btnHomeRemote.setEnabled(false);
      btnRefreshRemote.setEnabled(false);
      btnUpRemote.setEnabled(false);
      btnDelRemote.setEnabled(false);
      btnNewFolderRemote.setEnabled(false);
      txtPathRemote.setEnabled(false);
      txtPathRemote.setText("/");
      mniNewFolder.setEnabled(false);
      mniGraphAuthor.setEnabled(false);
      mniBayesAuthor.setEnabled(false);
      mniConceptEditor.setEnabled(false);
      mniFormEditor.setEnabled(false);
      mniTestEditor.setEnabled(false);
      mniUpload.setEnabled(false);
      mniPaste.setEnabled(false);
      focusLocal = true;
      loggedin = false;
      FAuthorname = null;

          lblRemoteInfo.setText("Not logged in");
            clRemote.show(pnlRemote, "tabInfo");
    }//GEN-LAST:event_mniLogoutActionPerformed

    /**
     * Reacts to mouseclicks performed in the local filesystem tree.
     * @param evt The event that triggered this action
     */
    private void triLocalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_triLocalMouseClicked
      DefaultMutableTreeNode selnode = (DefaultMutableTreeNode)triLocal.getLastSelectedPathComponent();
      
      //Loc Nguyen add
      if(selnode == null) {}
      
      TreePath tp = triLocal.getClosestPathForLocation(evt.getX(), evt.getY());
      Rectangle r = triLocal.getPathBounds(tp);

      if (r != null) {
        //update selection
        if (!r.contains(evt.getX(), evt.getY()) &&
          evt.getModifiersEx() != java.awt.event.MouseEvent.CTRL_DOWN_MASK &&
          evt.getModifiersEx() != java.awt.event.MouseEvent.SHIFT_DOWN_MASK
        )
          triLocal.clearSelection();
      }

      //handle mouse event

      //handle double click, open file or directory
      if (evt.getClickCount() >= 2 && evt.getButton() == java.awt.event.MouseEvent.BUTTON1) {
        pmniOpenActionPerformed(null);
      }

      //handle single right-click, show popupmenu
      if (evt.getClickCount() == 1 && evt.getButton() == java.awt.event.MouseEvent.BUTTON3) {
        Object obj;

        if (r != null && r.contains(evt.getX(), evt.getY()))
          obj = tp.getLastPathComponent();
        else
          obj = null;

        JPopupMenu p = new JPopupMenu();

        if (obj == null) {//show general popup menu
          p.add(pmniUpLocal); pmniUpLocal.setEnabled(btnUpLocal.isEnabled());
          p.add(pmniHomeLocal);

          p.add(new JSeparator(JSeparator.HORIZONTAL));
          p.add(pmniRefreshLocal);
          p.add(pmniNewFolderLocal); pmniNewFolderLocal.setEnabled(btnNewFolderLocal.isEnabled());
          p.add(new JSeparator(JSeparator.HORIZONTAL));
          p.add(pmniPaste);
          pmniPaste.setEnabled(mniPaste.isEnabled());
        }
        else {//show popup menu for file, select file
          if (!triLocal.isPathSelected(tp)) {
            triLocal.clearSelection();
            triLocal.setSelectionPath(tp);
          }

          p.add(pmniOpen);
          p.add(new JSeparator(JSeparator.HORIZONTAL));
          p.add(pmniUpload); pmniUpload.setEnabled(loggedin);
          p.add(new JSeparator(JSeparator.HORIZONTAL));
          p.add(pmniDeleteLocal); pmniDeleteLocal.setEnabled(btnDelLocal.isEnabled());
          p.add(pmniRenameLocal);
          p.add(new JSeparator(JSeparator.HORIZONTAL));
          p.add(pmniCopy);
        }

        p.show(triLocal, evt.getX(), evt.getY());
      }
    }//GEN-LAST:event_triLocalMouseClicked

    /**
     * Reacts to changes in the selection of triLocal
     * @param evt The event that triggered this action
     */
    private void triLocalValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_triLocalValueChanged
      Object selobj = triLocal.getLastSelectedPathComponent();
      btnDelLocal.setEnabled(selobj != null);
      mniUpload.setEnabled(selobj != null && loggedin);

      Object remselobj = triRemote.getLastSelectedPathComponent();
      boolean aselection = (selobj != null || remselobj != null);
      mniCopy.setEnabled(aselection);
      mniDelete.setEnabled(aselection);
      mniRename.setEnabled(aselection);
    }//GEN-LAST:event_triLocalValueChanged

    /**
     * Reacts to changes in the selection of triRemote
     * @param evt The event that triggered this action
     */
    private void triRemoteValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_triRemoteValueChanged
      //System.out.println("vc");
      Object selobj = triRemote.getLastSelectedPathComponent();
      btnDelRemote.setEnabled(selobj != null);
      mniDownload.setEnabled(selobj != null);

      if (selobj != null) {
        DefaultMutableTreeNode node = (DefaultMutableTreeNode)selobj;
        TAMtFile f = (TAMtFile)node.getUserObject();
        boolean isApp = f.isApp();
        boolean isAuthorFile = remoteTreeMode == AMtc.AUTHOR_FILES_MODE &&
                               remoteRoot.getPath().equals("/");
        boolean isWow = f.getName().endsWith(".wow") && !f.isDirectory();
        boolean isGaf = f.getName().endsWith(".gaf") && !f.isDirectory();
        boolean isBif = f.getName().endsWith(OverlayBayesUM.OBUM_EXT) && !f.isDirectory();
        boolean isFrm = f.getName().endsWith(".frm") && !f.isDirectory();
        boolean isTest = f.getName().endsWith(".test") && !f.isDirectory();

        boolean enableCCC = isApp || (isAuthorFile && (isWow || isGaf));
        boolean enablegaf = isApp || (isGaf && isAuthorFile);
        boolean enablebif = isApp || (isBif && isAuthorFile);
        boolean enablewow = isApp || (isWow && isAuthorFile);
        boolean enablefrm = isFrm;
        boolean enabletest = isTest;

        mniCCC.setEnabled(enableCCC);
        mniOpenGaf.setEnabled(enablegaf);
        mniOpenBif.setEnabled(enablebif);
        mniOpenWow.setEnabled(enablewow);
        mniOpenFrm.setEnabled(enablefrm);
        mniOpenTest.setEnabled(enabletest);

        mnuOpenWith.setEnabled(enablegaf || enablewow || enablefrm || enabletest);

      }
      else {
        mniCCC.setEnabled(false);
        mnuOpenWith.setEnabled(false);
      }

      Object locselobj = triLocal.getLastSelectedPathComponent();
      boolean aselection = (selobj != null || locselobj != null);
      mniCopy.setEnabled(aselection);
      mniDelete.setEnabled(aselection);
      mniRename.setEnabled(aselection);
    }//GEN-LAST:event_triRemoteValueChanged

    /**
     * Reacts to mouseclicks performed in the remote filesystem tree.
     * @param evt The event that triggered this action
     */
    private void triRemoteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_triRemoteMouseClicked
      if (!triRemote.isEnabled()) return;
      DefaultMutableTreeNode selnode = (DefaultMutableTreeNode)triRemote.getLastSelectedPathComponent();
      TreePath tp = triRemote.getClosestPathForLocation(evt.getX(), evt.getY());
      Rectangle r = triRemote.getPathBounds(tp);

      if (r != null) {
        //update selection
        if (!r.contains(evt.getX(), evt.getY()) &&
          evt.getModifiersEx() != java.awt.event.MouseEvent.CTRL_DOWN_MASK &&
          evt.getModifiersEx() != java.awt.event.MouseEvent.SHIFT_DOWN_MASK
        )
          triRemote.clearSelection();
      }

      //handle mouseevent

      //handle double click, open file or directory
      if (evt.getClickCount() >= 2 && evt.getButton() == java.awt.event.MouseEvent.BUTTON1) {
        pmniOpenActionPerformed(null);
      }

      //handle single right-click, show popupmenu
      if (evt.getClickCount() == 1 && evt.getButton() == java.awt.event.MouseEvent.BUTTON3) {
        Object obj;

        if (r != null && r.contains(evt.getX(), evt.getY()))
          obj = tp.getLastPathComponent();
        else
          obj = null;

        JPopupMenu p = new JPopupMenu();

        if (obj == null) {//show general popup menu
          p.add(pmniUpRemote); pmniUpRemote.setEnabled(btnUpRemote.isEnabled());
          p.add(pmniHomeRemote);

          p.add(new JSeparator(JSeparator.HORIZONTAL));
          p.add(pmniRefreshRemote);

          if (remoteRoot.getPath().equals("/") &&
                remoteTreeMode == AMtc.APP_FILES_MODE)
            pmniNewFolderRemote.setText("New Application");
          else
            pmniNewFolderRemote.setText("New Folder");
          p.add(pmniNewFolderRemote); pmniNewFolderRemote.setEnabled(btnNewFolderRemote.isEnabled());
          p.add(new JSeparator(JSeparator.HORIZONTAL));
          p.add(pmniPaste);
          pmniPaste.setEnabled(mniPaste.isEnabled());
        }
        else {//show popup menu for file, select file
          if (!triRemote.isPathSelected(tp)) {
            triRemote.clearSelection();
            triRemote.setSelectionPath(tp);
          }

          selnode = (DefaultMutableTreeNode)triRemote.getLastSelectedPathComponent();
          if (selnode == null) return;
          TAMtFile f = (TAMtFile)selnode.getUserObject();

          if (f.isDirectory()) {
            p.add(pmniOpen);
            p.add(new JSeparator(JSeparator.HORIZONTAL));
          }

          if (f.isApp()) {
            p.add(pmniCCC); pmniCCC.setFont(new Font("Dialog", 0, 12));
            p.add(new JSeparator(JSeparator.HORIZONTAL));

            p.add(pmniOpenGaf); pmniOpenGaf.setFont(new Font("Dialog", 0, 12));
            p.add(pmniOpenBif); pmniOpenBif.setFont(new Font("Dialog", 0, 12));
            p.add(pmniOpenWow); pmniOpenWow.setFont(new Font("Dialog", 0, 12));

            p.add(new JSeparator(JSeparator.HORIZONTAL));
            p.add(pmniDeleteDomain); pmniDeleteDomain.setFont(new Font("Dialog", 0, 12));
            p.add(new JSeparator(JSeparator.HORIZONTAL));
          }

          if (!f.isDirectory() && remoteTreeMode == AMtc.AUTHOR_FILES_MODE
               && remoteRoot.getPath().equals("/")) {
            String name = f.getName();
            if (name.endsWith(".wow")) {
              p.add(pmniOpenWow); pmniOpenWow.setFont(new Font("Dialog", 1, 12));
              p.add(new JSeparator(JSeparator.HORIZONTAL));
              p.add(pmniCCC); pmniCCC.setFont(new Font("Dialog", 0, 12));
              p.add(new JSeparator(JSeparator.HORIZONTAL));
            }
            else if (name.endsWith(".gaf")) {
              p.add(pmniOpenGaf); pmniOpenGaf.setFont(new Font("Dialog", 1, 12));
              p.add(new JSeparator(JSeparator.HORIZONTAL));
              p.add(pmniCCC); pmniCCC.setFont(new Font("Dialog", 0, 12));
              p.add(new JSeparator(JSeparator.HORIZONTAL));
            }
            else if (name.endsWith(OverlayBayesUM.OBUM_EXT)) {
                p.add(pmniOpenBif); pmniOpenBif.setFont(new Font("Dialog", 1, 12));
                p.add(new JSeparator(JSeparator.HORIZONTAL));
                p.add(pmniCCC); pmniCCC.setFont(new Font("Dialog", 0, 12));
                p.add(new JSeparator(JSeparator.HORIZONTAL));
              }
          }
          if (!f.isDirectory() && f.getName().endsWith(".frm")) {
              p.add(pmniOpenFrm);
              p.add(new JSeparator(JSeparator.HORIZONTAL));
          }
          if (!f.isDirectory() && f.getName().endsWith(".test")) {
              p.add(pmniOpenTest);
              p.add(new JSeparator(JSeparator.HORIZONTAL));
          }

          p.add(pmniDownload);
          p.add(new JSeparator(JSeparator.HORIZONTAL));
          p.add(pmniDeleteRemote); pmniDeleteRemote.setEnabled(btnDelRemote.isEnabled());
          p.add(pmniRenameRemote);
          p.add(new JSeparator(JSeparator.HORIZONTAL));
          p.add(pmniCopy);
        }

        p.show(triRemote, evt.getX(), evt.getY());
      }
    }//GEN-LAST:event_triRemoteMouseClicked

    /**
     * Initializes components, which are not inited by the Sun One generated
     * method "initcomponents".
     */
    private void postInitComponents() {
      //init trees
      File f = new File("Local");
      TAMtFile af = new TAMtFile("/", "Remote", true);

      //set treemodels
      tmLocal = new DefaultTreeModel(new DefaultMutableTreeNode(f));
      tmRemote = new DefaultTreeModel(new DefaultMutableTreeNode(af));

      //set transferhandlers for drag and drop
      triLocal.setTransferHandler(new TFileListTransferHandler());
      triRemote.setTransferHandler(new TFileListTransferHandler());

      //set tooltipmanagers
      ToolTipManager.sharedInstance().registerComponent(triLocal);
      ToolTipManager.sharedInstance().registerComponent(triRemote);

      //init triLocal
      triLocal.setModel(tmLocal);
      triLocal.setRootVisible(false);

      TFileSystemTreeRenderer r = new TFileSystemTreeRenderer();
      triLocal.setCellRenderer(r);
      triLocal.setCellEditor(new TFileSystemTreeEditor(gui, triLocal, r));

      //fill tmLocal with start dir
      showLocalStartDir();
      txtPathLocal.setCaretPosition(txtPathLocal.getText().length());

      //init triRemote
      triRemote.setModel(tmRemote);
      triRemote.setRootVisible(false);

      triRemote.setCellRenderer(r);
      triRemote.setCellEditor(new TFileSystemTreeEditor(gui, triRemote, r));

      remoteRoot = (TAMtFile)getRoot(triRemote).getUserObject();
      secRemoteRoot = (TAMtFile)remoteRoot.clone();

      spnRemoteAppFiles.setViewportView(triRemote);
      //spnRemoteAuthorFiles.setViewportView(triRemote);
      remoteTreeMode = AMtc.APP_FILES_MODE;

      //Create infoTable
      Object[] columnnames = {"Action", "Source File","Source Directory",
        "Destination Directory", "Status"};
      tm = new DefaultTableModel(columnnames,0){
    		private static final long serialVersionUID = 1L;

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return false;
            }
      };
      tblInfo = new JTable(tm);

      spnInfo.setViewportView(tblInfo);

      tblInfo.setIntercellSpacing(new java.awt.Dimension(0,0));
      tblInfo.setRowSelectionAllowed(true);
      tblInfo.setShowGrid(false);

      tblInfo.addFocusListener(new java.awt.event.FocusAdapter() {
        public void focusGained(java.awt.event.FocusEvent evt) {
          tblInfoFocusGained(evt);
        }
      });

      tblInfo.addMouseListener(new java.awt.event.MouseAdapter() {
          public void mouseClicked(java.awt.event.MouseEvent evt) {
              tblInfoMouseClicked(evt);
          }
      });

      tblInfo.getTableHeader().setReorderingAllowed(false);
      spnInfo.getViewport().setBackground(new java.awt.Color(255,255,255));

      //start transfer thread
      transfer = new TransferThread();
      transfer.start();

      //get cardlayout for local panel
      clRemote = (CardLayout)pnlRemote.getLayout();
    }

    /**
     * Handles mouseclicks performed in tblInfo
     * @param evt the event that triggered this action
     */
    private void tblInfoMouseClicked(java.awt.event.MouseEvent evt) {
      //handle single right-click, show popupmenu
      if (evt.getClickCount() == 1 && evt.getButton() == java.awt.event.MouseEvent.BUTTON3) {

        JPopupMenu p = new JPopupMenu();

        p.add(pmniCancel);
        pmniCancel.setEnabled(transfer.working);
        p.show(tblInfo, evt.getX(), evt.getY());
      }
    }

    /**
     * Retrieves the menubar of this panel
     * @return the menubar for this panel
     */
    public javax.swing.JMenuBar getMenuBar() {
      return mb;
    }

    /**
     * Stops all activity of this class. Stops the transferThread.
     */
    public void exitApp() {
      exiting = true;
      AMt.cancelTransfer();
    }

    /**
     * Renames a local file.
     * @param f    the file to rename
     *        newf the new File
     * @return An error code, see the error code listing in {@link AMtc} for all
     * possible error codes.
     *
     */
    public int renameFile(File f, File newf) {
      int error = AMtc.NO_ERRORS;
      if (f == null || newf == null) {
        error = AMtc.ERROR;
        return error;
      }

      if (!f.exists()) {
        error = AMtc.ERROR_COULD_NOT_RENAME_FILE;
        return error;
      }

      if (newf.exists()) {//could not rename
        if (f.isDirectory())
          error = AMtc.ERROR_FOLDER_ALREADY_EXISTS;
        else
          error = AMtc.ERROR_FILE_ALREADY_EXISTS;
        return error;
      }

      //f exists, newf does not exist. proceed with rename

      if (!validFileName(newf.getName())) {
        error = AMtc.ERROR_ILLEGAL_CHARS_IN_FILENAME;
        return error;
      }

      if (!f.renameTo(newf)) {//renaming failed
        error = AMtc.ERROR_COULD_NOT_RENAME_FILE;
        return error;
      }
      else {//renaming succeeded
        error = AMtc.NO_ERRORS;
        return error;
      }
    }

    /**
     * Renames a remote file.
     * @param f    the file to rename
     *        newf the new File
     * @return An error code, see the error code listing in {@link AMtc} for all
     * possible error codes.
     */
    public int renameFile(TAMtFile f, TAMtFile newf) {
      int error = AMt.rename(f.getPath(), newf.getName(), remoteTreeMode);
      return error;
    }

    /**
     * Empties a tree, leaving only the root of the tree.
     * @param tri the tree to empty
     */
    private void emptyTree(JTree tri) {
      getRoot(tri).removeAllChildren();
    }

    /**
     * Retrieves the rootnode of a tree.
     * @param tri the tree to retrieve the root of
     * @return the rootnode of <Code>tri</Code>
     **/
    private DefaultMutableTreeNode getRoot(JTree tri) {
      return ((DefaultMutableTreeNode)tri.getModel().getRoot());
    }

    /**
     * Loads the roots of a local filesystem in triLocal.
     * Only the first level of files is displayed.
     */
    private void showLocalFileSystemRoots() {
      emptyTree(triLocal);

      DefaultMutableTreeNode root = getRoot(triLocal);
      String homedir = System.getProperty("user.home");
      JFileChooser fc = new JFileChooser(homedir);
      FileSystemView fsv = fc.getFileSystemView();

      File[] roots = fsv.getRoots();
      for (int i = 0;i<roots.length ;i++) {
        File f = roots[i];
        DefaultMutableTreeNode node = new DefaultMutableTreeNode(f);
        root.add(node);
      }

      //set buttons & txtfield
      btnUpLocal.setEnabled(false);
      btnDelLocal.setEnabled(false);
      btnNewFolderLocal.setEnabled(false);
      txtPathLocal.setText("");

      localRoot = null;
      tmLocal.reload();
    }

    /**
     * Loads the users homedirectory of the local filesystem in triLocal.
     * Only the first level of files is displayed.
     */
    private void showLocalStartDir() {
      emptyTree(triLocal);

      getRoot(triLocal);
      JFileChooser fc = new JFileChooser();
      FileSystemView fsv = fc.getFileSystemView();

      File startdir = fsv.getDefaultDirectory();
      listFilesLocal(startdir);
    }

    /**
     * Lists the files in the directory of local file <Code>f</Code> in
     * triLocal. Only the first level of files is displayed. If <Code>f</Code>
     * is a file, nothing is displayed.
     * @param f The directory to list the files for.
     */
    private void listFilesLocal(File f) {
      if (f == null) return;

      emptyTree(triLocal);
      DefaultMutableTreeNode root = getRoot(triLocal);
      File[] files = f.listFiles();

      //sort files with directories first
      Arrays.sort(files, new Comparator() {
          public int compare(Object a, Object b) {
              File filea = (File)a;
              File fileb = (File)b;
              //--- Sort directories before files,
              //    otherwise alphabetical ignoring case.
              if (filea.isDirectory() && !fileb.isDirectory()) {
                  return -1;
              } else if (!filea.isDirectory() && fileb.isDirectory()) {
                  return 1;
              } else {
                  return filea.getName().compareToIgnoreCase(fileb.getName());
              }
          }
      });

      //display list of files
      for (int i = 0;i< files.length;i++ ) {
        if (!files[i].isHidden()) {
          DefaultMutableTreeNode node = new DefaultMutableTreeNode(files[i]);
          root.add(node);
        }
      }

      //update localroot
      localRoot = f;

      //set buttons & txtfield
      btnUpLocal.setEnabled(true);
      btnDelLocal.setEnabled(false);
      btnNewFolderLocal.setEnabled(true);

      String homedir = System.getProperty("user.home");
      JFileChooser fc = new JFileChooser(homedir);
      FileSystemView fsv = fc.getFileSystemView();

      String path;
      String name = f.getName();
      String sysname = fsv.getSystemDisplayName(f);

      try {
        path = f.getCanonicalPath();
      }
      catch (Exception e){
        path = f.getPath();
      }

      if (name.equals(""))  //something like c:\, display path only
        txtPathLocal.setText(path);
      else {
        path = path.substring(0, path.lastIndexOf(name));
        txtPathLocal.setText(path + sysname);
      }

      tmLocal.reload();
    }

    /**
     * Lists the files in the directory of remote file <Code>f</Code> in the
     * remote tree. Only the first level of files is displayed. If
     * <Code>f</Code> is a file, nothing is displayed. The tree is first
     * emptied, then all files are added to the root of the tree.
     * @param f The directory to list the files for.
     * @param afilemode mode indicating location of the file, which is either
     * AMtc.APP_FILES_MODE or AMtc.AUTHOR_FILES_MODE
     */
    private void listFilesRemote(TAMtFile f, int afilemode) {
      if (f == null) return;

      emptyTree(triRemote);
      DefaultMutableTreeNode root = getRoot(triRemote);
      TAMtFile[] files = AMt.listFiles(f.getPath(), afilemode);
      if (files == null) {showError(AMtc.ERROR_NO_SUCH_REMOTE_DIR);
         return;
      }

      //display list of files
      for (int i = 0;i< files.length;i++ ) {
        DefaultMutableTreeNode node = new DefaultMutableTreeNode(files[i]);
        root.add(node);
      }

      //update remoteRoot
      remoteRoot = f;

      //set buttons & txtfield
      boolean b = ((TAMtFile)getRoot(triRemote).getUserObject()).getPath().
                    equals(f.getPath());
      if (b && (afilemode == AMtc.APP_FILES_MODE)) {
        mniNewFolder.setText("New Application");
        btnNewFolderRemote.setToolTipText("New Application");
      }
      else {
        mniNewFolder.setText("New Folder");
        btnNewFolderRemote.setToolTipText("New Folder");
      }

      btnUpRemote.setEnabled(!b);

      btnDelRemote.setEnabled(false);
      btnNewFolderRemote.setEnabled(true);

      txtPathRemote.setText(f.getPath());

      tmRemote.reload();
    }

    /**
     * Checks if a filename is valid, meaning is does not contain illegal
     * characters.
     * @param name the filename to check for illegal chars
     * @return <Code>true</Code> if and only if the name is valid
     */
    private boolean validFileName(String name) {
      if (name == null) return true;
      String[] ic = new String [] {"/", "\\", ":", "*", "?", "\"", "<", ">", "|"};
      for (int i = 0;i<ic.length ;i++ ) {
        if (name.indexOf(ic[i]) != -1) return false;
      }
      return true;
    }

    /**
     * Checks if a file already exists on remote server.
     * @param name the name of the file
     * @param path the path of the file
     * @param afilemode mode indicating location of the file, which is either
     * AMtc.APP_FILES_MODE or AMtc.AUTHOR_FILES_MODE
     * @return true if and only if the file exists on the server.
     */
    private boolean fileExistsRemote(String name, String apath, int afilemode) {
      TAMtFile[] files = AMt.listFiles(apath, afilemode);
      if (files == null) return false;

      for (int i = 0;i<files.length ;i++ ) {
        if (files[i].getName().equals(name)) return true;
      }
      return false;
    }

    /**
     * Removes a directory and all its contents from local filesystem.
     * @param f the dir to remove
     * @return An error code, see the error code listing in {@link AMtc} for all
     * possible error codes.
     */
    private int rmDir(File f) {
      try {
        if (!f.exists()) return AMtc.ERROR_NO_SUCH_LOCAL_DIR;
        int error = AMtc.NO_ERRORS;
        File[] files = f.listFiles();

        for (int i = 0;i<files.length ;i++ ) {
          if (files[i].isDirectory()) {
            int j = rmDir(files[i]);
            if (j != AMtc.NO_ERRORS) error = j;
          }
          else if (!files[i].delete())
            error = AMtc.ERROR_COULD_NOT_CREATE_FILE;
        }

        if (!f.delete())
          error = AMtc.ERROR_COULD_NOT_DELETE_DIR;

        return error;
      }
      catch (Exception e) {
        System.out.println("Exception in AMtClientGUI.rmDir: " + e.toString());
        return AMtc.ERROR;
      }
    }

    /**
     * Adds a folder to the current dir of the remote filesystem view.
     * @param name the name of the folder
     * @param apath The path to create the folder in.
     *              Path must be of form /app/folder1.
     * @param afilemode mode indicating location of the file, which is either
     * AMtc.APP_FILES_MODE or AMtc.AUTHOR_FILES_MODE
     * @return An error code, see the error code listing in {@link AMtc} for all
     * possible error codes.
     */
    private int addFolderRemote(String name, String apath, int afilemode) {
      int error = AMtc.NO_ERRORS;

      //validate name of new map
      if (name == null) return AMtc.ERROR;
      if (name.equals("")) name = "New Folder";
      if (!validFileName(name)) return AMtc.ERROR_ILLEGAL_CHARS_IN_FILENAME;

      boolean exists = fileExistsRemote(name, apath, afilemode);

      if (exists) return AMtc.NO_ERRORS;
      //name validated, add it to the server and to the tree
      if (apath.equals("/") && afilemode == AMtc.APP_FILES_MODE) {//add application
        if (!name.matches("[a-zA-Z_][a-zA-Z_0-9]*")) return AMtc.ERROR_INVALID_APP_NAME;
        error = AMt.addApp(name);
        if (!fileExistsRemote(name+".wow", "/", AMtc.AUTHOR_FILES_MODE)) AMt.addWowFile(name);
        if (!fileExistsRemote(name+".gaf", "/", AMtc.AUTHOR_FILES_MODE)) AMt.addGafFile(name);
      }
      else {//add folder
        error = AMt.addFolder(apath+"/"+name, afilemode);
      }

      return error;
    }

    /**
     * Adds a row to tblInfo.
     * @param v the row to add in Vector representation
     */
    private void addInfoRow(Vector v) {
      tm.addRow(v);
    }

    /**
     * Updates the status column for a row in tblInfo and sets it so that it
     * is visible.
     * @param rowindex the index of the row to update
     * @param status an object that will be placed in the status column for row
     * <Code>i</Code>
     */
    private void updateInfoRowStatus(final int rowindex, final Object status) {
      //update status for row
      final int columnindex = tblInfo.getColumnModel().getColumnIndex("Status");

      if (status instanceof JProgressBar) {
        tblInfo.getColumnModel().getColumn(columnindex).setCellRenderer(
          new TAMtProgressBarTableCellRenderer());
      }
      else tblInfo.getColumnModel().getColumn(columnindex).setCellRenderer(
             new DefaultTableCellRenderer());

      SwingUtilities.invokeLater(new Runnable() {

        public void run() {// necessary GUI-updates
          tm.setValueAt(status, rowindex, columnindex);
          Rectangle rect = tblInfo.getCellRect(rowindex, 0, true);
          tblInfo.scrollRectToVisible(rect);
          repaintTable();
        }
      });
    }

    /**
     * Creates a canonical path of form /app/course from a String.
     * Removes all ..\ and such.
     * @param s the string to convert
     * @return the converted string, or null if the path is illegal, meaning
     * taht it leads outside the wow context folder.
     */
    private String getCanonicalPath(String s) {
      if (!s.startsWith("/") && !s.startsWith("\\"))
        s = "/" + s;
      String fs = System.getProperty("file.separator");
      StringBuffer sb;

      File f = new File(s);
      File rf = new File("/");

      try {
        String path = f.getCanonicalPath();
        //System.out.println(path);

        if (!path.startsWith(rf.getCanonicalPath())) return null;
        else path = path.substring(rf.getCanonicalPath().length());

        sb = new StringBuffer(path);
        if (!"/".equals(fs)) {
          //replace all instances of file separator by "/" for platform independancy
          while (sb.indexOf(fs) != -1) {
            sb.replace(sb.indexOf(fs), sb.indexOf(fs)+1, "/");
          }
        }
        path = sb.toString();
        if (!path.startsWith("/") && !path.startsWith("\\"))
          path = "/" + path;

        //System.out.println(path);
        return path;
      }
      catch (Exception e) {
        //System.out.println("AMtClientGUI.getCanonicalPath: " + e.toString());
        return null;
      }
    }

    /**
     * Opens a file with the default external application. Currently only works
     * for windows platforms.
     * @param filepath The absolute path to the file to open.
     */
    private void openFile(String filepath) {
      try {
        String osName = System.getProperty("os.name");
        osName = osName.toLowerCase();

        String[] cmd = new String[3];

        if ((osName.indexOf("nt") != -1)
           || (osName.indexOf("windows 2") != -1)
           || (osName.indexOf("windows xp") != -1))
          cmd[0] = "cmd.exe";
        else if (osName.indexOf("Windows 9") != -1)
          cmd[0] = "command.com";
        else return;

        cmd[1] = "/C";
        cmd[2] = filepath;

        Runtime.getRuntime().exec(cmd);
      }
      catch (IOException e) {
        System.out.println("IOException in AMTClientGUI.triLocalMouseClicked: " + e.toString());
        return;
      }
    }

    /**
     * Copies all data from one file to another, thus creating two identical
     * files.
     * @param from the file to copy from
     * @param to   the file to copy to
     */
    private void sendDataToFile(File from, File to)
      throws IOException, FileNotFoundException {
      FileInputStream in = new FileInputStream(from);
      FileOutputStream out = new FileOutputStream(to);

      FileChannel cin = in.getChannel();
      FileChannel cout = out.getChannel();

      cin.transferTo(0, cin.size(), cout);

      in.close();
      out.flush();
      out.close();
    }

    /**
     * Shows a JOptionPane error dialog box with the specified error. The
     * parent of the dialog box is this JPanel. No Error is shown when the
     * error code equals <code>AMtc.NO_ERRORS</code> or
     * <code>AMtc.ERROR_USER_ABORTED</code>.
     * @param error An error code, see the error code listing in {@link AMtc}
     * for all possible error codes.
     */
    public void showError(int error) {
      if ((error == AMtc.NO_ERRORS) || (error == AMtc.ERROR_USER_ABORTED))
        return;
      else
        JOptionPane.showMessageDialog(this, AMtc.getErrorMsg(error),
        AMtc.MESSAGE_HEADER_ERROR, JOptionPane.ERROR_MESSAGE);
    }

    /**
     * Counts all files in a dir, including all files in its subdirectories.
     * @param f the file to count the files for
     * @return the number of files in the dir or <Code>1</Code> if
     * <Code>f</Code> is a file
     */
    private int countFiles(File f) {
      int filecount = 0;

      if (f.isDirectory()) {
        File[] files = f.listFiles();

        for (int i = 0;i<files.length ;i++ ) {
          if (files[i].isDirectory())
            filecount += countFiles(files[i]);
          else filecount++;
        }
      }
      else filecount = 1;

      return filecount;
    }

    /**
     * Counts all files in a dir, including all files in its subdirectories
     * @param f The file to count the files for
     * @param afilemode mode indicating location of the file, which is either
     * AMtc.APP_FILES_MODE or AMtc.AUTHOR_FILES_MODE
     * @return the number of files in the dir or <Code>1</Code> if
     * <Code>f</Code> is a file
     */
    private int countFiles(TAMtFile f, int afilemode) {
      int filecount = 0;

      if (f.isDirectory()) {
        TAMtFile[] files = AMt.listFiles(f.getPath(), afilemode);

        for (int i = 0;i<files.length ;i++ ) {
          if (files[i].isDirectory())
            filecount += countFiles(files[i], afilemode);
          else filecount++;
        }
      }
      else filecount = 1;

      return filecount;
    }

    /**
     * Sets the cursor of this panel to the default wait cursor.
     */
    private void setWaitCursor() {
      setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
    }

    /**
     * Sets the cursor of this panel to the default cursor.
     */
    private void setDefaultCursor() {
      setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }

    /**
     * METHODS FOR TCCCPOPUPINTERFACE
     */

    /**
     * Retrieves a CCC report for an application
     * @param aauthorname name of an author
     * @param aappname name of an application
     * @return a CCC report for the requested application
     */
    public TCCCReport getReport(String aauthorname, String aappname) {
      return AMt.CCC(aappname);
    }

    /**
     * Opens the <Code>.gaf</Code> file for an application. The Graph Authoring
     * Tool is started and displayed in a new Thread in a new JFrame.
     * @param aauthorname name of an author
     * @param aappname name of an application
     */
    public void openGafFile(String aauthorname, String aappname) {
      String filename = aappname + ".gaf";

      if (!fileExistsRemote(filename, "/", AMtc.AUTHOR_FILES_MODE))
        //create standard .gaf file
        AMt.addGafFile(aappname);


      //start GraphAuthor with selected file
      if (noOpenGA()) new GraphAuthor(AMtc.SERVERURL, FAuthorname, filename); else {
            JOptionPane.showMessageDialog(null,
                                          "Graph Author is already open",
                                          "information",
                                          JOptionPane.OK_OPTION);
      }
    }

    public void openBifFile(String aauthorname, String aappname) {
        String filename = aappname + OverlayBayesUM.OBUM_EXT;

        if (!fileExistsRemote(filename, "/", AMtc.AUTHOR_FILES_MODE))
          //create standard file
          AMt.addBifFile(aappname);


        //start GraphAuthor with selected file
        try {
        	new OverlayBayesInspector(AMtc.SERVERURL, FAuthorname, aappname, OverlayBayesUM.OBUM_DEFAULT_BAYESNET_TYPE);
        }
        catch(Exception e) {
        	System.out.println(e.getMessage());
        	JOptionPane.showMessageDialog(null, "Can not open Bayes Author\n" + e.getMessage());
        }
      }

    /**
     * Opens the <Code>.wow</Code> file for an application. The Concept Editor
     * is started and displayed in a new Thread in a new JFrame.
     * @param aauthorname name of an author
     * @param aappname name of an application
     */
    public void openWowFile(String aauthorname, String aappname) {
      String filename = aappname+".wow";

      if (!fileExistsRemote(filename, "/", AMtc.AUTHOR_FILES_MODE))
        //create standard .wow file
        AMt.addWowFile(aappname);


      //start ConceptEditor with selected file
      if (!EditorApplet.isOpen()) new EditorApplet(AMtc.SERVERURL, FAuthorname, filename); else {
            JOptionPane.showMessageDialog(null,
                                          "Concept Editor is already open",
                                          "information",
                                          JOptionPane.OK_OPTION);
      }
    }

    /**
     * Repaints the infoField, including the info Table.
     */
    public void repaintTable() {
      SwingUtilities.invokeLater(new Runnable() {

        public void run() {// necessary GUI-updates
          spnInfo.repaint();
        }
      });
    }

    private AMtClient AMt;
    private Object[] copydata;       //data on clipboard
    private int copyfilemode;        //filemode for files on clipboard, in case
                                     //of copying remote files
    private boolean focusLocal = true;//if true, triLocal was the last tree that
                                     //got the focus, if false, it was triRemote
    private boolean exiting = false;
    private static AMtClientGUI gui;
    private File localRoot;           //root of local filesystem view
    private boolean loggedin = false; //if an author has logged in
    private String FAuthorname;       //name of the currently logged in author
    private JFrame FParent;           //frame that contains this panel
    private TAMtFile remoteRoot;      //remote root of current remote view
    private TAMtFile secRemoteRoot;   //remote root of remote view of other tab (application or author tab)
    private JTable tblInfo;
    private DefaultTableModel tm;     //tablemodel for tblInfo
    private DefaultTreeModel tmLocal; //treemodel for triLocal
    private DefaultTreeModel tmRemote;//treemodel for triRemote
    private TransferThread transfer;
    private CardLayout clRemote;      //cardlayout of remote panel
    private int remoteTreeMode;/*indication of the mode of the remote tree view,
    which can be either "application files" mode or "author files" mode.
    One of the values AMtc.APP_FILES_MODE or AMtc.AUTHOR_FILES_MODE from the
    AMtc constant file.*/
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelLocal;
    private javax.swing.JButton btnDelRemote;
    private javax.swing.JButton btnHomeLocal;
    private javax.swing.JButton btnHomeRemote;
    private javax.swing.JButton btnNewFolderLocal;
    private javax.swing.JButton btnNewFolderRemote;
    private javax.swing.JButton btnRefreshLocal;
    private javax.swing.JButton btnRefreshRemote;
    private javax.swing.JButton btnUpLocal;
    private javax.swing.JButton btnUpRemote;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator10;
    private javax.swing.JSeparator jSeparator12;
    private javax.swing.JSeparator jSeparator13;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JLabel lblLocal;
    private javax.swing.JLabel lblRemoteInfo;
    private javax.swing.JMenuBar mb;
    private javax.swing.JMenuItem mniAbout;
    private javax.swing.JMenuItem mniCCC;
    private javax.swing.JMenuItem mniChangeProfile;
    private javax.swing.JMenuItem mniConceptEditor;
    private javax.swing.JMenuItem mniCopy;
    private javax.swing.JMenuItem mniDelete;
    private javax.swing.JMenuItem mniDownload;
    private javax.swing.JMenuItem mniExit;
    private javax.swing.JMenuItem mniFormEditor;
    private javax.swing.JMenuItem mniGraphAuthor;
    private javax.swing.JMenuItem mniBayesAuthor;
    private javax.swing.JMenuItem mniLogin;
    private javax.swing.JMenuItem mniLogout;
    private javax.swing.JMenuItem mniNewFolder;
    private javax.swing.JMenuItem mniOpenWow;
    private javax.swing.JMenuItem mniOpenFrm;
    private javax.swing.JMenuItem mniOpenGaf;
    private javax.swing.JMenuItem mniOpenBif;
    private javax.swing.JMenuItem mniOpenTest;
    private javax.swing.JMenuItem mniPaste;
    private javax.swing.JMenuItem mniRefresh;
    private javax.swing.JMenuItem mniRename;
    private javax.swing.JMenuItem mniTestEditor;
    private javax.swing.JMenuItem mniUpload;
    private javax.swing.JMenu mnuEdit;
    private javax.swing.JMenu mnuFile;
    private javax.swing.JMenu mnuHelp;
    private javax.swing.JMenu mnuOpenWith;
    private javax.swing.JMenu mnuOperation;
    private javax.swing.JMenu mnuTools;
    private javax.swing.JMenuItem pmniCCC;
    private javax.swing.JMenuItem pmniCancel;
    private javax.swing.JMenuItem pmniClear;
    private javax.swing.JMenuItem pmniCopy;
    private javax.swing.JMenuItem pmniCreateWow;
    private javax.swing.JMenuItem pmniCreateFrm;
    private javax.swing.JMenuItem pmniCreateGaf;
    private javax.swing.JMenuItem pmniDeleteLocal;
    private javax.swing.JMenuItem pmniDeleteRemote;
    private javax.swing.JMenuItem pmniDownload;
    private javax.swing.JMenuItem pmniHomeLocal;
    private javax.swing.JMenuItem pmniHomeRemote;
    private javax.swing.JMenuItem pmniNewFolderLocal;
    private javax.swing.JMenuItem pmniNewFolderRemote;
    private javax.swing.JMenuItem pmniOpen;
    private javax.swing.JMenuItem pmniOpenWow;
    private javax.swing.JMenuItem pmniOpenFrm;
    private javax.swing.JMenuItem pmniOpenGaf;
    private javax.swing.JMenuItem pmniOpenBif;
    private javax.swing.JMenuItem pmniOpenTest;
    private javax.swing.JMenuItem pmniDeleteDomain;
    private javax.swing.JMenuItem pmniPaste;
    private javax.swing.JMenuItem pmniRefreshLocal;
    private javax.swing.JMenuItem pmniRefreshRemote;
    private javax.swing.JMenuItem pmniRenameLocal;
    private javax.swing.JMenuItem pmniRenameRemote;
    private javax.swing.JMenuItem pmniSave;
    private javax.swing.JMenuItem pmniUpLocal;
    private javax.swing.JMenuItem pmniUpRemote;
    private javax.swing.JMenuItem pmniUpload;
    private javax.swing.JPanel pnlAppFiles;
    private javax.swing.JPanel pnlAuthorFiles;
    private javax.swing.JPanel pnlButtons;
    private javax.swing.JPanel pnlInfo;
    private javax.swing.JPanel pnlLocal;
    private javax.swing.JPanel pnlLocalButtons;
    private javax.swing.JPanel pnlRemote;
    private javax.swing.JPanel pnlRemoteButtons;
    private javax.swing.JPopupMenu popRightClick;
    private javax.swing.JSplitPane splFileInfo;
    private javax.swing.JSplitPane splLocalRemote;
    private javax.swing.JScrollPane spnInfo;
    private javax.swing.JScrollPane spnLocal;
    private javax.swing.JScrollPane spnRemoteAppFiles;
    private javax.swing.JScrollPane spnRemoteAuthorFiles;
    private javax.swing.JTabbedPane tabRemote;
    private javax.swing.JTree triLocal;
    private javax.swing.JTree triRemote;
    private javax.swing.JTextField txtPathLocal;
    private javax.swing.JTextField txtPathRemote;
    // End of variables declaration//GEN-END:variables

    /**
     * <p>Title: LoginDialogThread</p>
     * <p>Description: Represents a Thread that handles the login of the author.
     * </p>
     * <p>Copyright: 2008</p>
     * @author T.J. Dekker, changed by Phuoc-Loc Nguyen
     * @version 1.0.0
    **/
    private class LoginDialogThread extends Thread {

      /**
       * Constructor
       */
      public LoginDialogThread() {
      }

      /**
       * Constructs a Frame where logindata needs to be entered. If this login
       * data is correct, the triRemote is filled with all the author's
       * applications and all buttons and menuitems that affect the remote
       * view are set accordingly. Shows error message if entered logindata is
       * incorrect.
       */
      public void run() {
        LoginDialog login = new LoginDialog(new JFrame(""));

          if (login.id) {
              lblRemoteInfo.setText("Logging in...");
                clRemote.show(pnlRemote, "tabInfo");

          String authorname = login.username.getText();
                String passwd = new String(login.password.getPassword());

                boolean b = AMt.login(authorname, passwd);

          if (b) {//get list of applications, show them in remote panel
                  emptyTree(triRemote);
            triRemote.setEnabled(true);
            triRemote.setBackground(new java.awt.Color(255,255,255));

                  DefaultMutableTreeNode root = getRoot(triRemote);
                  listFilesRemote((TAMtFile)root.getUserObject(), remoteTreeMode);

            mniChangeProfile.setEnabled(true);
            mniLogout.setEnabled(true);
            btnHomeRemote.setEnabled(true);
            btnRefreshRemote.setEnabled(true);
            txtPathRemote.setEnabled(true);
            mniNewFolder.setEnabled(true);
            mniGraphAuthor.setEnabled(true);
            mniBayesAuthor.setEnabled(true);
            mniConceptEditor.setEnabled(true);
            mniFormEditor.setEnabled(true);
            mniTestEditor.setEnabled(true);
            mniUpload.setEnabled(triLocal.getSelectionCount()>0);
            FAuthorname = authorname;
            loggedin = true;
                clRemote.show(pnlRemote, "tabFiles");
                }
                else {//access denied
                  showError(AMtc.ERROR_LOGIN);
                  mniLogoutActionPerformed(null);
                  //lblRemoteInfo.setText("Not logged in");

                }
          }
          login.dispose();
        setDefaultCursor();
      }
    }

  /**
   *
   * Implements a transferhandler for AMt, for drag and drop purposes.
   */
  private class TFileListTransferHandler extends TransferHandler {

    /**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	/**
     * Constructor
     */
    public TFileListTransferHandler() {
      super();
    }

    /**
     * Constructor
     */
    public TFileListTransferHandler(String prop) {
      super(prop);
    }

    /**
     * Indicates whether a component would accept an import of the given set of
     * data flavors prior to actually attempting to import it.
     */
    public boolean canImport(JComponent comp, DataFlavor[] transferFlavors){
      //System.out.println("canImport");
      TFileListTransferable tr = new TFileListTransferable();
      DataFlavor[] flavors = tr.getTransferDataFlavors();

      boolean b = false;
      for (int i = 0; i < flavors.length; i++ ) {
        for (int j = 0;j< transferFlavors.length ;j++) {
          b |= flavors[i].equals(transferFlavors[j]);
        }
      }
      if (!b) return false;

      if (comp.equals(triRemote) && !triRemote.isEnabled())
        return false;

      return true;
    }

    /**
     * Creates a Transferable to use as the source for a data transfer.
     * @param c source component
     * @return the created transferable object
     */
    protected Transferable createTransferable(JComponent c) {
      //System.out.println("createTransferable");
      //copy from JTree
      if (!(c instanceof JTree)) return null;

      JTree source = (JTree)c;
      TreePath[] selpaths = source.getSelectionPaths();

      Object[] files = new Object[selpaths.length];

      for (int i = 0;i<selpaths.length ;i++ ) {
        DefaultMutableTreeNode node =
          (DefaultMutableTreeNode)selpaths[i].getLastPathComponent();
        files[i] = node.getUserObject();
      }

      if (c.equals(triRemote)) {//create AMtFile[] transferable
        TAMtFile[] v = new TAMtFile[files.length];
        for (int i = 0;i<v.length ;i++ ) {
          v[i] = (TAMtFile)files[i];
        }

        return new TFileListTransferable(v);
      }
      else {//create filelist transferable
        Vector v = new Vector();
        for (int i = 0; i<files.length ; i++) {
            v.add(files[i]);
        }

        return new TFileListTransferable(v);
      }
    }

    /**
     * Returns the type of transfer actions supported by the source.
     */
    public int getSourceActions(JComponent c) {
      //System.out.println("getSourceActions");
      return COPY;
    }

    /**
     * Causes a transfer to a component from a clipboard or a DND drop operation.
     */
    public boolean importData(JComponent comp, Transferable t) {
      //System.out.println("drop event");
      //check if comp is a JTree (triLocal or triRemote) only continue if
      //this is the case
      if (!comp.equals(triRemote) && !comp.equals(triLocal)) return false;

      Object data = null;

      try {
        if (t.isDataFlavorSupported(TFileListTransferable.TAMtFileListFlavor)) {
          //System.out.println("amtfile list flavor supported");
          data = t.getTransferData(TFileListTransferable.TAMtFileListFlavor);

          if (comp.equals(triLocal)) {//download files if dropped in triLocal
            //System.out.println("downloading");
            TAMtFile[] files = (TAMtFile[])data;

            //download files
            DownloadOperation dop = new DownloadOperation((TAMtFile[])files, localRoot.getPath(), remoteTreeMode);
            transfer.addOperation(dop);
          }
          else if (comp.equals(triRemote)) {//move files if dropped in triRemote
            //System.out.println("moving remote files");
            //get target to copy files to
            String target = null;

            DefaultMutableTreeNode selnode = (DefaultMutableTreeNode)triRemote.getLastSelectedPathComponent();
            if (selnode != null) {
              TAMtFile f = (TAMtFile)selnode.getUserObject();
              if (f.isDirectory())//copy files to selected directory
                target = f.getPath();
            }

            if (target == null) {
              showError(AMtc.ERROR_COPY_TARGET_IS_SOURCE);
              return false;
            }
            //Loc Nguyen add
            if(target == null) {}

            //copy files to target
            final TAMtFile[] files = (TAMtFile[])data;

            //avoid recursive calls
            for (int j = 0; j<files.length ;j++ ) {
              if (target.equals(files[j].getPath()))
                return false;
            }

            final int filemode = remoteTreeMode;
            final String ftarget = target;

            Thread thr = new Thread() {
              public void run() {
                CopyRemoteOperation cop = new CopyRemoteOperation(files, ftarget, filemode, filemode);
                cop.execute();
              }
            };
            thr.start();
          }
        }
        else if (t.isDataFlavorSupported(DataFlavor.javaFileListFlavor)) {
          //System.out.println("file list flavor supported");
          data = t.getTransferData(DataFlavor.javaFileListFlavor);

          if (comp.equals(triLocal)) {//move files if dropped in triLocal
            //System.out.println("moving local files");
            java.util.List fileList = (java.util.List)data;

            final File[] files = new File[fileList.size()];

            //convert List to File[]
            for (int i = 0;i< fileList.size() ;i++ ) {
              File f = (File)fileList.get(i);
              files[i] = f;
            }

            DefaultMutableTreeNode selnode = (DefaultMutableTreeNode)triLocal.getLastSelectedPathComponent();
            String target = localRoot.getPath();

            if (selnode != null) {
              File f = (File)selnode.getUserObject();
              if (f.isDirectory()) //copy files to selected directory
                target = f.getPath();
            }

            //avoid recursive calls
            for (int j = 0; j<files.length ;j++ ) {
              if (target.equals(files[j].getPath()))
                return false;
            }

            final String ftarget = target;

            Thread thr = new Thread() {
              public void run() {
                CopyLocalOperation cop = new CopyLocalOperation(files, ftarget);
                cop.execute();
              }
            };
            thr.start();
          }
          else if (comp.equals(triRemote)) {//upload files if dropped in triRemote
            //System.out.println("uploading");
            java.util.List fileList = (java.util.List)data;
            File[] files = new File[fileList.size()];

            //convert List to File[]
            for (int i = 0;i< fileList.size() ;i++ ) {
              File f = (File)fileList.get(i);
              files[i] = f;
            }

            //upload files
            UploadOperation uop = new UploadOperation(files, remoteRoot.getPath(), remoteTreeMode);
            transfer.addOperation(uop);
          }
        }
        else { //flavor not implemented
          System.out.println("flavor not implemented");
          return false;
        }
      }
      catch (Exception e) {
        System.out.println("Exception in AMtClientGUI.TFileListTransferHandler" +
        ".importdata: " + e.toString());
        return false;
      }

      return true;
    }
  }

  /**
   * <p>Title: TransferThread</p>
   * <p>Description: Represents a Thread that handles transfer of files,
   * like uploads and downloads. Also updates the GUI to display progress
   * of these operations. This thread should handle all file transfers done
   * in AMtClientGUI.
   * </p>
   * <p>Copyright: 2008</p>
   * @author T.J. Dekker, changed by Phuoc-Loc Nguyen
   * @version 1.0.0
  **/
  private class TransferThread extends Thread {

    private Vector FQueue;
    private boolean working;

    /**
     * Constructor
     */
    public TransferThread() {
      FQueue = new Vector();
      working = false;
    }

    /**
     * Adds an operation to <Code>FQueue</Code>, so that it is scheduled for
     * processing. If <Code>op</Code> is an upload or download action, then
     * rows are added to tblInfo representing the list of files to
     * upload/download.
     * @param op the operation to add
     */
    public void addOperation(TransferOperation op) {
      //add line to tblInfo to indicate that operation is queued.
      int opcode = op.getType();

      if (opcode == AMtc.OP_UPLOAD) {
        UploadOperation uop = (UploadOperation)op;
        uop.setTblRow(tblInfo.getRowCount());
        initUploadRows(uop.getFiles(), uop.getPath(), uop.getFilemode());
      }
      else if (opcode == AMtc.OP_DOWNLOAD) {
        DownloadOperation dop = (DownloadOperation)op;
        dop.setTblRow(tblInfo.getRowCount());
        initDownloadRows(dop.getFiles(), dop.getPath(), dop.getFilemode());
      }

      FQueue.add(op);
    }

    /**
     * Initializes all rows in tblInfo for a list of files of an upload
     * operation
     * @param files the files to upload
     * @param path the directory to send the files to
     * @param filemode mode indicating location of the file, which is either
     * AMtc.APP_FILES_MODE or AMtc.AUTHOR_FILES_MODE
     */
    private void initUploadRows(File[] files, String path, int filemode) {
      int result = 0;

      for (int i = 0;i<files.length ;i++ ) {
        if (files[i].isDirectory()) {
          String newpath = path + (path.endsWith("/")?"":"/") + files[i].getName();
          initUploadRows(files[i].listFiles(), newpath, filemode);
        }
        else {
          Vector row = new Vector();

          row.add("Upload");
          row.add(files[i].getName());
          row.add(files[i].getParent());
          row.add(path);
          row.add("Queued");

          addInfoRow(row);
          result++;
        }
      }
    }

    /**
     * Initializes all rows in tblInfo for a list of files of a download
     * operation
     * @param files the files to download
     * @param path the directory to send the files to
     * @param filemode mode indicating location of the file, which is either
     * AMtc.APP_FILES_MODE or AMtc.AUTHOR_FILES_MODE
     */
    private void initDownloadRows(TAMtFile[] files, String path, int filemode) {
      int result = 0;

      for (int i = 0;i<files.length ;i++ ) {
        if (files[i].isDirectory()) {
          String newpath = path +
            (path.endsWith(File.separator)?"":File.separator) +
            files[i].getName();
          initDownloadRows(AMt.listFiles(files[i].getPath(), filemode),
            newpath, filemode);
        }
        else {
          Vector row = new Vector();

          row.add("Download");
          row.add(files[i].getName());

          String sourcepath = files[i].getPath().substring(
            0,files[i].getPath().lastIndexOf("/")
          );

          if (sourcepath.equals("")) sourcepath="/";
          row.add(sourcepath);

          row.add(path);
          row.add("Queued");

          addInfoRow(row);
          result++;
        }
      }
    }

    /**
     * Checks FQueue for operations to perform and executes them one by one.
     * If FQueue is empty, this method waits a while, then tries again.
     */
    public void run() {
      while (!exiting) {
        if (!FQueue.isEmpty()) {//process first item in queue
          working = true;

          TransferOperation op = (TransferOperation)FQueue.remove(0);
          op.getType();

          //execute operation
          op.execute();

          working = false;
        }

        else {//sleep
          try { sleep(100); }
          catch (Exception e) {
            //System.out.println("AMtClientGUI.TransferThread.run(): " + e.toString());
          }
        }
      }
    }
  }


  /**
   * Abstract class representing a transfer operation.
   */
  private abstract class TransferOperation {
    protected int FType;      //type of the operation, being one of the
                              //operation constants from AMtc.
    protected int FOwStatus;  //overwrite status for this operation


    /**
     * Performs the operation that this class represents.
     */
    abstract public void execute();

    public int getType() { return FType;}
  }

  /**
   * Class representing an upload operation.
   */
  private class UploadOperation extends TransferOperation {
    private File[] FFiles;
    private String FPath;
    private int FFilemode;
    private int FTblRow;

    /**
     * Constructor
     * @param afiles the files to upload
     * @param apath a path of the remote filesystem of form /app/folder
     * @param filemode mode indicating location of the file, which is either
     * AMtc.APP_FILES_MODE or AMtc.AUTHOR_FILES_MODE
     */
    public UploadOperation(File[] afiles, String apath, int afilemode) {
      FType = AMtc.OP_UPLOAD;
      FOwStatus = AMtc.NO;
      FFiles = afiles;
      FPath = apath;
      FFilemode = afilemode;
      FTblRow = 0;
    }

    /**
     * Sets the correct tablerow of tblInfo from where the files to upload
     * are listed.
     * @param tblRow the correct tablerow of tblInfo from where the files to
     * upload are listed.
     */
    public void setTblRow(int atblrow) {
      FTblRow = atblrow;
    }

    public File[] getFiles() { return FFiles;}
    public String getPath() { return FPath;}
    public int getFilemode() { return FFilemode;}

    /**
     * Performs the upload operation.
     */
    public void execute() {
      int error = AMtc.NO_ERRORS;

      for(int i = 0 ;i< FFiles.length ;i++ ) {
        int j = uploadFile(FFiles[i], FPath, FTblRow, FFilemode);
        if (j!=AMtc.NO_ERRORS) error = j;

        FTblRow += countFiles(FFiles[i]);
      }

      showError(error);
      btnRefreshRemoteActionPerformed(null);
    }

    /**
     * Uploads a file to a path of the remote filesystem view.
     * If f is a folder, all contents of this dir are also uploaded.
     * @param f the file to upload
     * @param apath a path of the remote filesystem of form /app/folder
     * @param tblRow The row in tblInfo that is the row indicating the upload
     * of file <Code>f</Code>. If <Code>f</Code> is a directory, this is the
     * rowindex from where all files of this directory are listed.
     * @param filemode mode indicating location of the file, which is either
     * AMtc.APP_FILES_MODE or AMtc.AUTHOR_FILES_MODE
     * @return An error code, see the error code listing in {@link AMtc} for all
     * possible error codes.
     */
    private int uploadFile(File f, String apath, int tblRow, int filemode) {
      int error = AMtc.NO_ERRORS;

      if (FOwStatus == AMtc.CANCEL) {//do not upload, user aborted
        for (int i = 0; i<countFiles(f); i++) {
          updateInfoRowStatus(tblRow+i, "Cancelled");
        }
        return AMtc.ERROR_USER_ABORTED;
      }

      if (f == null) {//do not upload, file is null
        updateInfoRowStatus(tblRow, "Failed");
        return AMtc.ERROR;
      }
      if (!f.exists()) {//do not upload, file does not exist
        updateInfoRowStatus(tblRow, "Failed");
        return AMtc.ERROR;
      }

      String filepath = apath + ((apath.endsWith("/"))?"":"/") + f.getName();
      boolean exists = fileExistsRemote(f.getName(), apath, filemode);

      if (exists) {//file exists, check overwrite status
        if (FOwStatus != AMtc.YES_TO_ALL) {//ask for overwrite

          String msg = f.isDirectory()?AMtc.getMsgDirOverwrite(f.getName()):
            AMtc.getMsgFileOverwrite(f.getName());

          if (FOwStatus != AMtc.NO_TO_ALL) {
            int i = JOptionPane.showOptionDialog(gui, msg,
                  AMtc.MESSAGE_HEADER_CONFIRM, 0,JOptionPane.QUESTION_MESSAGE,
                    null, AMtc.OWBUTTONS, AMtc.OWBUTTONS[2]);

            FOwStatus = i;
          }

          if (FOwStatus == AMtc.NO || FOwStatus == AMtc.NO_TO_ALL || FOwStatus == AMtc.CANCEL) {//overwrite cancelled, return
            for (int j = 0; j<countFiles(f); j++) {
              updateInfoRowStatus(tblRow + j, "Cancelled");
            }
            return AMtc.ERROR_USER_ABORTED;
          }
        }

        if (!f.isDirectory()) {//could not overwrite file
          if (!(AMt.delete(filepath, filemode) == AMtc.NO_ERRORS)) {
            updateInfoRowStatus(tblRow, "Failed");
            return AMtc.ERROR_COULD_NOT_OVERWRITE_FILE;
          }
        }
      }

      //file does not exist, if directory, dir may exist
      if (f.isDirectory()) {//upload folder and all its contents

        error = addFolderRemote(f.getName(), apath, filemode);
        if (error != AMtc.NO_ERRORS) {
          for (int j = 0; j<countFiles(f); j++) {
            updateInfoRowStatus(tblRow + j, "Failed");
          }
          return error;
        }

        File[] files = f.listFiles();

        //folder exists, recursively add files
        for (int i = 0;i<files.length ;i++ ) {
          int j = uploadFile(files[i], filepath, tblRow, filemode);
          if (j != AMtc.NO_ERRORS) error = j;

          tblRow += countFiles(files[i]);
        }
      }
      else {//upload file
        if (!(apath.equals("/") && (filemode == AMtc.APP_FILES_MODE))) {//do not upload files in root (wow root)

          JProgressBar bar = new JProgressBar(0,100);
          bar.setValue(0);
          updateInfoRowStatus(tblRow, bar);

          error = AMt.upload(f, filepath, bar, filemode);
        }
        else //may not upload a file to application files root
          error = AMtc.ERROR_CAN_NOT_UPLOAD_FILES_TO_ROOT;

        //update upload status in tblInfo
        String status;

        switch (error) {
          case AMtc.NO_ERRORS: status = "Completed"; break;
          case AMtc.ERROR_USER_ABORTED: status = "Cancelled"; break;
          default: status = "Failed"; break;
        }

        updateInfoRowStatus(tblRow, status);
      }
      return error;
    }
  }

  /**
   * Class representing a download operation.
   */
  private class DownloadOperation extends TransferOperation {
    private TAMtFile[] FFiles;
    private String FPath;
    private int FFilemode;
    private int FTblRow;

    /**
     * Constructor
     * @param afiles the files to download
     * @param apath a path of the local filesystem
     * @param filemode mode indicating location of the file, which is either
     * AMtc.APP_FILES_MODE or AMtc.AUTHOR_FILES_MODE
     */
    public DownloadOperation(TAMtFile[] afiles, String apath, int afilemode) {
      FType = AMtc.OP_DOWNLOAD;
      FOwStatus = AMtc.NO;
      FFiles = afiles;
      FPath = apath;
      FFilemode = afilemode;
      FTblRow = 0;
    }

    /**
     * Sets the correct tablerow of tblInfo from where the files to download
     * are listed.
     * @param tblRow the correct tablerow of tblInfo from where the files to
     * download are listed.
     */
    public void setTblRow(int atblrow) {
      FTblRow = atblrow;
    }

    public TAMtFile[] getFiles() { return FFiles;}
    public String getPath() { return FPath;}
    public int getFilemode() { return FFilemode;}

    /**
     * Performs the download operation.
     */
    public void execute() {
      int error = AMtc.NO_ERRORS;

      for(int i = 0 ;i<FFiles.length ;i++ ) {
        int j = downloadFile(FFiles[i], FPath, FTblRow, FFilemode);
        if (j!= AMtc.NO_ERRORS) error = j;

        FTblRow += countFiles(FFiles[i], FFilemode);
      }

      showError(error);
      btnRefreshLocalActionPerformed(null);
    }

    /**
     * Downloads a file from server to a path of the local filesystem. If f is
     * a folder, all contents of this dir are also downloaded.
     * @param f the file to download.
     * @param apath a path of the local filesystem.
     * @param tblRow The row in tblInfo that is the row indicating the download
     *               of file f. If f is a directory, this is the rowindex from
     *               where all files of this directory are listed.
     * @param filemode mode indicating location of the file, which is either
     * AMtc.APP_FILES_MODE or AMtc.AUTHOR_FILES_MODE
     * @return An error code, see the error code listing in {@link AMtc} for all
     * possible error codes.
     */
    private int downloadFile(TAMtFile f, String apath, int tblRow, int filemode) {
      int error = AMtc.NO_ERRORS;

      if (FOwStatus == AMtc.CANCEL) {//do not download, user aborted
        for (int j = 0; j<countFiles(f, filemode); j++) {
          updateInfoRowStatus(tblRow + j, "Cancelled");
        }
        return AMtc.ERROR_USER_ABORTED;
      }

      if (f==null) {//do not download, file is null
        updateInfoRowStatus(tblRow, "Failed");
        return AMtc.ERROR;
      }

      String filepath;
      if (apath.endsWith(File.separator)) filepath = apath + f.getName();
      else filepath = apath + File.separator + f.getName();

      File dl = new File(filepath);

      try {
        if (dl.exists()) {//file already exists, check overwrite status

          if (FOwStatus != AMtc.YES_TO_ALL) {//ask for overwrite

            String msg = f.isDirectory()?AMtc.getMsgDirOverwrite(dl.getName()):
              AMtc.getMsgFileOverwrite(dl.getName());

            if (FOwStatus != AMtc.NO_TO_ALL) {
              int i = JOptionPane.showOptionDialog(gui, msg,
                    AMtc.MESSAGE_HEADER_CONFIRM, 0,JOptionPane.QUESTION_MESSAGE,
                      null, AMtc.OWBUTTONS, AMtc.OWBUTTONS[2]);

              FOwStatus = i;
            }

            if (FOwStatus == AMtc.NO || FOwStatus == AMtc.NO_TO_ALL || FOwStatus == AMtc.CANCEL) {//overwrite cancelled, return
              for (int j = 0; j<countFiles(f, filemode); j++) {
                updateInfoRowStatus(tblRow + j, "Cancelled");
              }
              return AMtc.ERROR_USER_ABORTED;
            }
          }

          if (!dl.delete() && !f.isDirectory()) {//could not overwrite file
            updateInfoRowStatus(tblRow, "Failed");
            return AMtc.ERROR_COULD_NOT_OVERWRITE_FILE;
          }
        }

        //file does not exist, if directory, dir may exist
        if (f.isDirectory()) {//download entire dir

          dl.mkdir();
          if (!dl.exists()) {
            //abort downloading of dir, all files in dir could not be downloaded
            for (int i = 0; i<countFiles(f, filemode); i++) {
              updateInfoRowStatus(tblRow + i, "Failed");
            }
            return AMtc.ERROR_COULD_NOT_CREATE_DIR;
          }

          //folder exists, recursively add files
          TAMtFile[] files = AMt.listFiles(f.getPath(), filemode);

          for (int i = 0;i<files.length ;i++ ) {
            int j = downloadFile(files[i], filepath, tblRow, filemode);
            if (j != AMtc.NO_ERRORS) error = j;

            tblRow += countFiles(files[i], filemode);
          }
        }
        else {//download file
          if (dl.createNewFile()) {
            JProgressBar bar = new JProgressBar(0,100);
            bar.setValue(0);

            updateInfoRowStatus(tblRow, bar);

            error = AMt.download(f.getPath(), dl, f.getSize(), bar, filemode);
          }
          else error = AMtc.ERROR_COULD_NOT_CREATE_FILE;

          //update download status in tblInfo
          String status;

          switch (error) {
            case AMtc.NO_ERRORS: status = "Completed"; break;
            case AMtc.ERROR_USER_ABORTED: status = "Cancelled"; break;
            default: status = "Failed"; break;
          }

          updateInfoRowStatus(tblRow, status);
        }
      }
      catch (Exception e) {
        System.out.println("Exception in AMtClientGUI.download(): " +
          e.toString());
        return AMtc.ERROR;
      }
      return error;
    }
  }

  /**
   * Class representing a local copy operation.
   */
  private class CopyLocalOperation extends TransferOperation {
    private File[] FFiles;
    private String FPath;

    /**
     * Constructor
     * @param afiles the files to copy
     * @param apath a path of the local filesystem
     */
    public CopyLocalOperation(File[] afiles, String apath) {
      FType = AMtc.OP_COPY_LOCAL;
      FOwStatus = AMtc.NO;
      FFiles = afiles;
      FPath = apath;
    }

    /**
     * Performs the operation that this class represents.
     */
    public void execute() {
      int error = AMtc.NO_ERRORS;

      for (int i = 0; i<FFiles.length; i++) {
        int j = copyFile(FFiles[i], FPath);
        if (j != AMtc.NO_ERRORS) error = j;
      }

      showError(error);
      btnRefreshLocalActionPerformed(null);
    }

    /**
     * Copies a file to the specified path on the local filesystem
     * view. If the file is a folder, all contents of this folder are
     * also copied.
     * @param file the file to copy
     * @param apath the path to copy to
     * @return An error code, see the error code listing in {@link AMtc} for all
     * possible error codes.
     */
    private int copyFile(File f, String apath) {
      int error = AMtc.NO_ERRORS;

      if (FOwStatus == AMtc.CANCEL) {//do not copy, user aborted
        return AMtc.ERROR_USER_ABORTED;
      }

      if (f == null) {//do not copy, file is null
        return AMtc.ERROR;
      }

      String targetpath;
      if (apath.endsWith(File.separator)) targetpath = apath + f.getName();
      else targetpath = apath + File.separator + f.getName();

      try {//copy the file
        File cf = new File(targetpath);

        if (f.getPath().equals(cf.getPath()))
          return AMtc.ERROR_COPY_TARGET_IS_SOURCE;

        if (cf.exists()) {//file exists, check overwrite status
          if (FOwStatus != AMtc.YES_TO_ALL) {//ask for overwrite

            String msg = f.isDirectory()?AMtc.getMsgDirOverwrite(cf.getName()):
              AMtc.getMsgFileOverwrite(cf.getName());

            if (FOwStatus != AMtc.NO_TO_ALL) {
              int i = JOptionPane.showOptionDialog(gui, msg,
                    AMtc.MESSAGE_HEADER_CONFIRM, 0,JOptionPane.QUESTION_MESSAGE,
                      null, AMtc.OWBUTTONS, AMtc.OWBUTTONS[2]);

              FOwStatus = i;
            }

            if (FOwStatus == AMtc.NO || FOwStatus == AMtc.NO_TO_ALL || FOwStatus == AMtc.CANCEL) {//overwrite cancelled, return
              return AMtc.ERROR_USER_ABORTED;
            }
          }

          if (!cf.delete() && !f.isDirectory()) {//could not overwrite file
            return AMtc.ERROR_COULD_NOT_OVERWRITE_FILE;
          }
        }

        //file does not exist, if directory, dir may exist
        if (f.isDirectory()) {
          if (!cf.mkdir() && !cf.exists())
            return AMtc.ERROR_COULD_NOT_CREATE_DIR;

          File[] files = f.listFiles();

          for (int i = 0; i< files.length; i++) {
            int j = copyFile(files[i], cf.getPath());
            if (j != AMtc.NO_ERRORS) error = j;
          }
        }
        else {//add file
          if (!cf.createNewFile())
            return AMtc.ERROR_COULD_NOT_CREATE_FILE;

          //send data to file
          sendDataToFile(f, cf);
        }
      }
      catch (Exception e) {
        System.out.println(" Exception in AMtClientGUI.CopyLocalOperation.copyFiles(): " + e.toString());
        e.printStackTrace();
        return AMtc.ERROR;
      }
      return error;
    }
  }

  /**
   * Class representing a remote copy operation.
   */
  private class CopyRemoteOperation extends TransferOperation {
    private TAMtFile[] FFiles;
    private String FPath;
    private int FFromfilemode;
    private int FTofilemode;

    /**
     * Constructor
     * @param afiles the files to copy
     * @param apath a path of the remote filesystem of form /app/folder to
     *        copy the files in
     * @param afromfilemode mode indicating location of the file to copy from,
     * which is either AMtc.APP_FILES_MODE or AMtc.AUTHOR_FILES_MODE
     * @param atofilemode mode indicating location of the file to copy to, which
     * is either AMtc.APP_FILES_MODE or AMtc.AUTHOR_FILES_MODE
     */
    public CopyRemoteOperation(TAMtFile[] afiles, String apath,
                                         int afromfilemode, int atofilemode) {
      FType = AMtc.OP_COPY_REMOTE;
      FOwStatus = AMtc.NO;
      FFiles = afiles;
      FPath = apath;
      FFromfilemode = afromfilemode;
      FTofilemode = atofilemode;
    }

    /**
     * Performs the operation that this class represents.
     */
    public void execute() {
      int error = AMtc.NO_ERRORS;

      for (int i = 0; i<FFiles.length; i++) {
        int j = copyFile(FFiles[i], FPath, FFromfilemode, FTofilemode);
        if (j != AMtc.NO_ERRORS) error = j;
      }

      showError(error);
      btnRefreshRemoteActionPerformed(null);
    }

    /**
     * Copies a file to the specified path on the server filesystem
     * view. If the file is a folder, all contents of this folder are
     * also copied.
     * @param f the file to copy
     * @param apath the path to copy to
     * @param fromfilemode mode indicating location of the file to copy from,
     * which is either AMtc.APP_FILES_MODE or AMtc.AUTHOR_FILES_MODE
     * @param tofilemode mode indicating location of the file to copy to, which
     * is either AMtc.APP_FILES_MODE or AMtc.AUTHOR_FILES_MODE
     * @return An error code, see the error code listing in {@link AMtc} for all
     * possible error codes.
     */
    private int copyFile(TAMtFile f, String apath, int fromfilemode, int tofilemode) {
      int error = AMtc.NO_ERRORS;

      if (FOwStatus == AMtc.CANCEL) {//do not upload, user aborted
        return AMtc.ERROR_USER_ABORTED;
      }

      if (f == null) {//do not copy, file is null
        return AMtc.ERROR;
      }

      String filepath = apath + ((apath.endsWith("/"))?"":"/") + f.getName();
      boolean exists = fileExistsRemote(f.getName(), apath, tofilemode);

      if (exists && f.getPath().equals(filepath) && (fromfilemode == tofilemode))
        return AMtc.ERROR_COPY_TARGET_IS_SOURCE;

      if (exists) {//file exists, check overwrite status
        if (FOwStatus != AMtc.YES_TO_ALL) {//ask for overwrite

          String msg = f.isDirectory()?AMtc.getMsgDirOverwrite(f.getName()):
            AMtc.getMsgFileOverwrite(f.getName());

          if (FOwStatus != AMtc.NO_TO_ALL) {
            int i = JOptionPane.showOptionDialog(gui, msg,
                  AMtc.MESSAGE_HEADER_CONFIRM, 0,JOptionPane.QUESTION_MESSAGE,
                    null, AMtc.OWBUTTONS, AMtc.OWBUTTONS[2]);

            FOwStatus = i;
          }

          if (FOwStatus == AMtc.NO || FOwStatus == AMtc.NO_TO_ALL || FOwStatus == AMtc.CANCEL) {//overwrite cancelled, return
            return AMtc.ERROR_USER_ABORTED;
          }
        }

        if (!f.isDirectory()) {//could not overwrite file
          if (!(AMt.delete(filepath, tofilemode) == AMtc.NO_ERRORS))
            return AMtc.ERROR_COULD_NOT_OVERWRITE_FILE;
        }
      }

      //file does not exist, if directory, dir may exist
      if (f.isDirectory()) {
        error = addFolderRemote(f.getName(), apath, tofilemode);
        if (error != AMtc.NO_ERRORS) return error;

        //folder exists remotely, copy contents of directory
        TAMtFile[] files = AMt.listFiles(f.getPath(), fromfilemode);

        for (int i = 0; i<files.length; i++) {
          int j = copyFile(files[i], filepath, fromfilemode, tofilemode);
          if (j != AMtc.NO_ERRORS) error = j;
        }
      }
      else {//add file
          //System.out.println("copying file");
          if (apath.equals("/") && tofilemode == AMtc.APP_FILES_MODE)
            return AMtc.ERROR_CAN_NOT_UPLOAD_FILES_TO_ROOT;

        int j = AMt.copyFile(f.getPath(), apath, fromfilemode, tofilemode);
        if (j != AMtc.NO_ERRORS) error = j;
      }
      return error;
    }
  }
}