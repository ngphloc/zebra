//------------------------------------------------------------------------------
// Unit Name: ServerFileChooser.java
// Author: T.J. Dekker, reviewed and modified by Loc Nguyen
// Date of Creation: 19-10-2008
// Purpose:  A file dialog for use in the authoring tools. Allows an
// author to select a file that exists on an WOW! server.
//
// DOCUMENT CHANGES
//
// Date:           Author:             Change:
// -----------------------------------------------------------------------------
// 19-10-2008      T.J. Dekker         Creation
//------------------------------------------------------------------------------

package vn.spring.WOW.AMt;

import vn.spring.WOW.AMt.AMtc;
import vn.spring.WOW.AMt.AMtClient;
import vn.spring.WOW.AMt.TAMtFile;
import vn.spring.WOW.AMt.TFileSystemTreeRenderer;

import java.net.*;

import javax.swing.JOptionPane;
import javax.swing.ToolTipManager;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;


/**
 *
 * A file dialog for use in the authoring tools. Allows an author to select a
 * file that exists on an WOW! server.
 * @author  T.J. Dekker, changed by Loc Nguyen
 * @version 1.0.0
 */
public class ServerFileChooser extends javax.swing.JDialog {

    /**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	/**
     * Creates new form ServerFileChooser
     * @param home the URL to an WOW! server
     * @param aauthorname name of the author to create the dialog for
     * @param afilemode mode indicating location of the file, which is either
     * AMtc.APP_FILES_MODE or AMtc.AUTHOR_FILES_MODE
     * @param parent the parent frame for this dialog
     * @param modal if this dialog should be modal
     */
    public ServerFileChooser(URL home, String aauthorname, int afilemode,
                                       java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        url = home;
        authorname = aauthorname;
        filemode = afilemode;
        postInitComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        pnlMain = new javax.swing.JPanel();
        pnlButtons = new javax.swing.JPanel();
        txtPath = new javax.swing.JTextField();
        jSeparator13 = new javax.swing.JSeparator();
        btnUp = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        pnlFiles = new javax.swing.JPanel();
        spnRemoteAppFiles = new javax.swing.JScrollPane();
        triFiles = new javax.swing.JTree();
        pnlEnterFilename = new javax.swing.JPanel();
        lblFileName = new javax.swing.JLabel();
        txtFileName = new javax.swing.JTextField();
        pnlClose = new javax.swing.JPanel();
        lblEmpty = new javax.swing.JLabel();
        btnOk = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        setTitle("Choose File...");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        pnlMain.setLayout(new java.awt.GridBagLayout());

        pnlMain.setBackground(new java.awt.Color(255, 255, 255));
        pnlMain.setPreferredSize(new java.awt.Dimension(490, 370));
        pnlButtons.setLayout(new java.awt.GridBagLayout());

        pnlButtons.setBackground(new java.awt.Color(255, 255, 255));
        txtPath.setEditable(false);
        txtPath.setMaximumSize(new java.awt.Dimension(9999, 25));
        txtPath.setMinimumSize(new java.awt.Dimension(10, 25));
        txtPath.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
        pnlButtons.add(txtPath, gridBagConstraints);

        jSeparator13.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator13.setMaximumSize(new java.awt.Dimension(10, 25));
        jSeparator13.setMinimumSize(new java.awt.Dimension(10, 25));
        jSeparator13.setPreferredSize(new java.awt.Dimension(10, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
        pnlButtons.add(jSeparator13, gridBagConstraints);

        btnUp.setBackground(new java.awt.Color(255, 255, 255));
        btnUp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vn/spring/WOW/AMt/pics/up.png")));
        btnUp.setToolTipText("Up");
        btnUp.setMargin(new java.awt.Insets(2, 2, 2, 2));
        btnUp.setMaximumSize(new java.awt.Dimension(27, 25));
        btnUp.setMinimumSize(new java.awt.Dimension(27, 25));
        btnUp.setPreferredSize(new java.awt.Dimension(27, 25));
        btnUp.setEnabled(false);
        btnUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 9;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
        pnlButtons.add(btnUp, gridBagConstraints);

        btnRefresh.setBackground(new java.awt.Color(255, 255, 255));
        btnRefresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vn/spring/WOW/AMt/pics/refresh.png")));
        btnRefresh.setToolTipText("Refresh");
        btnRefresh.setMargin(new java.awt.Insets(2, 2, 2, 2));
        btnRefresh.setMaximumSize(new java.awt.Dimension(27, 25));
        btnRefresh.setMinimumSize(new java.awt.Dimension(27, 25));
        btnRefresh.setPreferredSize(new java.awt.Dimension(27, 25));
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 10;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
        pnlButtons.add(btnRefresh, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        pnlMain.add(pnlButtons, gridBagConstraints);

        pnlFiles.setLayout(new java.awt.BorderLayout());

        pnlFiles.setBackground(new java.awt.Color(255, 255, 255));
        pnlFiles.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        spnRemoteAppFiles.setBackground(new java.awt.Color(255, 255, 255));
        spnRemoteAppFiles.setBorder(null);
        triFiles.setDragEnabled(true);
        triFiles.setEditable(true);
        triFiles.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                triFilesMouseClicked(evt);
            }
        });
        triFiles.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                triFilesValueChanged(evt);
            }
        });

        spnRemoteAppFiles.setViewportView(triFiles);

        pnlFiles.add(spnRemoteAppFiles, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        pnlMain.add(pnlFiles, gridBagConstraints);

        pnlEnterFilename.setLayout(new java.awt.GridBagLayout());

        pnlEnterFilename.setBackground(new java.awt.Color(255, 255, 255));
        pnlEnterFilename.setMaximumSize(new java.awt.Dimension(32767, 40));
        pnlEnterFilename.setMinimumSize(new java.awt.Dimension(10, 40));
        pnlEnterFilename.setPreferredSize(new java.awt.Dimension(10, 40));
        lblFileName.setFont(new java.awt.Font("Dialog", 0, 12));
        lblFileName.setText("File Name:");
        lblFileName.setMaximumSize(new java.awt.Dimension(60, 25));
        lblFileName.setMinimumSize(new java.awt.Dimension(60, 25));
        lblFileName.setPreferredSize(new java.awt.Dimension(60, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        pnlEnterFilename.add(lblFileName, gridBagConstraints);

        txtFileName.setMaximumSize(new java.awt.Dimension(2147483647, 25));
        txtFileName.setMinimumSize(new java.awt.Dimension(4, 25));
        txtFileName.setPreferredSize(new java.awt.Dimension(63, 25));
        txtFileName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFileNameActionPerformed(evt);
            }
        });
        txtFileName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtFileNameKeyTyped(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        pnlEnterFilename.add(txtFileName, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        pnlMain.add(pnlEnterFilename, gridBagConstraints);

        pnlClose.setLayout(new java.awt.GridBagLayout());

        pnlClose.setBackground(new java.awt.Color(255, 255, 255));
        pnlClose.setMaximumSize(new java.awt.Dimension(40, 30));
        pnlClose.setMinimumSize(new java.awt.Dimension(40, 30));
        pnlClose.setPreferredSize(new java.awt.Dimension(40, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        pnlClose.add(lblEmpty, gridBagConstraints);

        btnOk.setFont(new java.awt.Font("Dialog", 0, 12));
        btnOk.setText("Ok");
        btnOk.setMaximumSize(new java.awt.Dimension(100, 25));
        btnOk.setMinimumSize(new java.awt.Dimension(100, 25));
        btnOk.setPreferredSize(new java.awt.Dimension(100, 25));
        btnOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOkActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        pnlClose.add(btnOk, gridBagConstraints);

        btnCancel.setFont(new java.awt.Font("Dialog", 0, 12));
        btnCancel.setText("Cancel");
        btnCancel.setMaximumSize(new java.awt.Dimension(80, 25));
        btnCancel.setMinimumSize(new java.awt.Dimension(80, 25));
        btnCancel.setPreferredSize(new java.awt.Dimension(80, 25));
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        pnlClose.add(btnCancel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(7, 10, 7, 10);
        pnlMain.add(pnlClose, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(pnlMain, gridBagConstraints);

        pack();
    }//GEN-END:initComponents

    /**
     * Handles key-typed events for component txtFileName
     * @param evt the event that triggered this action
     */
    private void txtFileNameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFileNameKeyTyped
      btnOk.setEnabled(!txtFileName.getText().equals(""));
    }//GEN-LAST:event_txtFileNameKeyTyped

    /**
     * Handles actionPerformed events for component txtFileName.
     * @param evt the event that triggered this action
     */
    private void txtFileNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFileNameActionPerformed
      if(dlgMode == OPEN_DIALOG) {//open filename found in txtFileName if it exists
        int i = fileExists(txtFileName.getText());
        if(i != -1) {
          triFiles.setSelectionRow(i);
          btnOkActionPerformed(null);
        }
      }
      else if (dlgMode == LOAD_APP_DIALOG) {
        int i = folderExists(txtFileName.getText());
        if(i != -1) {
          triFiles.setSelectionRow(i);
          btnOkActionPerformed(null);
        }
      }
      else if (dlgMode == SAVE_DIALOG) {//save typed file
          btnOkActionPerformed(null);
      }
    }//GEN-LAST:event_txtFileNameActionPerformed

    /**
     * Handles mouse-clicked events for component triFiles.
     * @param evt the event that triggered this action
     */
    private void triFilesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_triFilesMouseClicked
      Object selobj = triFiles.getLastSelectedPathComponent();
      DefaultMutableTreeNode selnode = (DefaultMutableTreeNode)selobj;

      //handle mouseevent

      //handle double click
      if (evt.getClickCount() >= 2 && evt.getButton() == java.awt.event.MouseEvent.BUTTON1) {
        if (selnode == null) return;
        TAMtFile f = (TAMtFile)selnode.getUserObject();

        //if "f" is a directory, change local path to the path of "f"
        //and list files of this directory in triFiles

        if (f.isDirectory() && !(dlgMode == LOAD_APP_DIALOG))
          listFiles(f);
        else //open file
          btnOkActionPerformed(null);
      }
    }//GEN-LAST:event_triFilesMouseClicked

    /**
     * Handles changes in the selection for component triFiles.
     * @param evt the event that triggered this action
     */
    private void triFilesValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_triFilesValueChanged
      Object selobj = triFiles.getLastSelectedPathComponent();
      boolean emptysel = (selobj == null);

      if (dlgMode == OPEN_DIALOG || dlgMode == LOAD_APP_DIALOG)
        btnOk.setEnabled(!emptysel);
      else if (dlgMode == SAVE_DIALOG)
        btnOk.setEnabled(!(emptysel && txtFileName.getText().equals("")));

      if (!emptysel) {//something selected
        DefaultMutableTreeNode node = (DefaultMutableTreeNode)selobj;
        TAMtFile f = (TAMtFile)node.getUserObject();

        if (!f.isDirectory() || dlgMode == LOAD_APP_DIALOG)
          txtFileName.setText(f.getName());

      }
    }//GEN-LAST:event_triFilesValueChanged

    /**
     * Handles actionPerformed events for component btnCancel.
     * Closes the dialog.
     * @param evt the event that triggered this action
     */
    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
      fileName = null;
      filePath = null;
      closeDialog(null);
    }//GEN-LAST:event_btnCancelActionPerformed

    /**
     * Handles actionPerformed events for component btnOk.
     * @param evt the event that triggered this action
     */
    private void btnOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOkActionPerformed
      Object obj = triFiles.getLastSelectedPathComponent();

      if (dlgMode == OPEN_DIALOG) {//open selected file
        if(obj == null) return;
        DefaultMutableTreeNode node = (DefaultMutableTreeNode)obj;
        TAMtFile f = (TAMtFile)node.getUserObject();
        if(f.isDirectory()) {
          listFiles(f);
          return;
        }
        fileName = f.getName();
        filePath = f.getPath();
        closeDialog(null);
      }
      else if (dlgMode == LOAD_APP_DIALOG) {//open selected application
        if(obj == null) return;
        DefaultMutableTreeNode node = (DefaultMutableTreeNode)obj;
        TAMtFile f = (TAMtFile)node.getUserObject();

        fileName = f.getName();
        filePath = f.getPath();
        closeDialog(null);
      }
      else if (dlgMode == SAVE_DIALOG) {//save with typed filename
        if(treeRoot.getPath().equals("/") && filemode == AMtc.APP_FILES_MODE){
          showError(AMtc.ERROR_CAN_NOT_UPLOAD_FILES_TO_ROOT);
          return;
        }

        if(!validFileName(txtFileName.getText())) {
          showError(AMtc.ERROR_ILLEGAL_CHARS_IN_FILENAME);
          return;
        }

        if(txtFileName.getText().equals("")) return;

        if(fileExists(txtFileName.getText()) == -1) {
          fileName = txtFileName.getText();
          filePath = treeRoot.getPath() + "/" + fileName;
          closeDialog(null);
        }
        else {//TODO: ask for overwrite
          fileName = txtFileName.getText();
          filePath = treeRoot.getPath() + "/" + fileName;
          closeDialog(null);
        }
      }
    }//GEN-LAST:event_btnOkActionPerformed

    /**
     * Refreshes the current file view by requesting the status of this dir
     * from the WOW! server.
     * @param evt the event that triggered this action
     */
    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
      listFiles(treeRoot);
    }//GEN-LAST:event_btnRefreshActionPerformed

    /**
     * Moves up a folder in the current file view or does nothing if this is
     * impossible.
     * @param evt The event that triggered this action
     */
    private void btnUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpActionPerformed
       if (treeRoot.equals(getRoot(triFiles))) return;

       String path = treeRoot.getPath();

       //if returning to root
       if (path.lastIndexOf("/") == 0) {
         TAMtFile f = (TAMtFile)getRoot(triFiles).getUserObject();
         listFiles(f);
         return;
       }

       //returning to path of form: /app/folder
       String name = path.substring(path.lastIndexOf("/")+1);
       path = path.substring(0, path.lastIndexOf("/"));

       TAMtFile f = new TAMtFile(path,name,true);
       listFiles(f);
    }//GEN-LAST:event_btnUpActionPerformed

    /**
     * Closes the dialog
     * @param evt the event that triggered this action
     */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog


    /**
     * Initializes components, which are not inited by the Sun One generated
     * method "initcomponents".
     */
    private void postInitComponents() {
      //init tree
      TAMtFile af = new TAMtFile("/", "Root", true);
      treeRoot = af;

      tm = new DefaultTreeModel(new DefaultMutableTreeNode(af));

      //init triRemote
      triFiles.setModel(tm);
      triFiles.setRootVisible(false);

      TFileSystemTreeRenderer r = new TFileSystemTreeRenderer(true);
      triFiles.setCellRenderer(r);
      triFiles.setEditable(false);

      ToolTipManager.sharedInstance().registerComponent(triFiles);

      //init filename/path
      fileName = null;
      filePath = null;

      //set location for frame
      setLocation(100, 100);
    }

    /**
     * Shows an application load dialog. A user can select an application from
     * a list.
     */
    public void showLoadAppDialog() {
      AMt = new AMtClient(url, authorname);
      listFiles(new TAMtFile("/", "", true));

      btnOk.setText("Load App");
      dlgMode = LOAD_APP_DIALOG;
      setTitle("Load Application");

      setVisible(true);
    }

    /**
     * Shows a file open dialog
     * @param afilefilter only files that end with one of the specified strings
     * will be displayed. If <Code>null</Code>, all files will be displayed.
     */
    public void showOpenDialog(String[] afilefilter) {
      fileFilter = afilefilter;

      AMt = new AMtClient(url, authorname);
      listFiles(new TAMtFile("/", "", true));

      btnOk.setText("Open file");
      dlgMode = OPEN_DIALOG;
      setTitle("Open");

      setVisible(true);
    }

    /**
     * Shows a file save dialog
     * @param afilefilter only files that end with one of the specified strings
     * will be displayed. If <Code>null</Code>, all files will be displayed.
     */
    public void showSaveDialog(String[] afilefilter) {
      fileFilter = afilefilter;

      AMt = new AMtClient(url, authorname);
      listFiles(new TAMtFile("/", "", true));

      btnOk.setText("Save file");
      dlgMode = SAVE_DIALOG;
      setTitle("Save");

      setVisible(true);
    }

    /**
     * Lists the files in the directory of remote file <Code>f</Code> in
     * triFiles. Only the first level of files is displayed. If
     * <Code>f</Code> is a file, nothing is displayed. The tree is first
     * emptied, then all files are added to the root of the tree.
     * Only files that end with one of the specified strings mentioned in
     * fileFilter will be displayed. If fileFilter equals <Code>null</Code>,
     * all files will be displayed.
     * @param f The directory to list the files for.
     */
    private void listFiles(TAMtFile f) {
      if (f == null) return;

      emptyTree(triFiles);
      DefaultMutableTreeNode root = getRoot(triFiles);
      TAMtFile[] files = AMt.listFiles(f.getPath(), filemode);
      if (files == null) {
        showError(AMtc.ERROR_NO_SUCH_REMOTE_DIR);
        return;
      }

      //display list of files
      for (int i = 0;i< files.length;i++ ) {
        if (files[i].isDirectory() || fileFiltered(files[i].getName())) {
          DefaultMutableTreeNode node = new DefaultMutableTreeNode(files[i]);
          root.add(node);
        }
      }

      //update remoteRoot
      treeRoot = f;

      //set buttons & txtfield
      boolean b = ((TAMtFile)getRoot(triFiles).getUserObject()).getPath().
                    equals(f.getPath());

      btnUp.setEnabled(!b);
      txtPath.setText(f.getPath());

      tm.reload();
    }

    /**
     * Empties a tree, leaving only the root of the tree.
     * @param tri the tree to empty
     */
    private void emptyTree(JTree tri) {
      getRoot(tri).removeAllChildren();
    }

    /**
     * Retrieves the rootnode of a tree.
     * @param tri the tree to retrieve the root of
     * @return the rootnode of <Code>tri</Code>
     **/
    private DefaultMutableTreeNode getRoot(JTree tri) {
      return ((DefaultMutableTreeNode)tri.getModel().getRoot());
    }

    /**
     * Checks if a filename is valid, meaning is does not contain illegal
     * characters.
     * @param name the filename to check for illegal chars
     * @return <Code>true</Code> if and only if the name is valid
     */
    private boolean validFileName(String name) {
      if (name == null) return true;
      String[] ic = new String [] {"/", "\\", ":", "*", "?", "\"", "<", ">", "|"};
      for (int i = 0;i<ic.length ;i++ ) {
        if (name.indexOf(ic[i]) != -1) return false;
      }
      return true;
    }

    /**
     * Checks if a file exists in the current view.
     * @param s name of the file to check for existence
     * @return the row in the current view at which the file occurs, or
     * -1 if the file does not exist at the current view.
     */
    private int fileExists(String s) {
      TAMtFile[] files = new TAMtFile[getRoot(triFiles).getChildCount()];
      for (int i = 0;i<files.length ;i++ ) {
        DefaultMutableTreeNode node =
          (DefaultMutableTreeNode)getRoot(triFiles).getChildAt(i);
        files[i] = (TAMtFile)node.getUserObject();
      }

      for(int i = 0; i < files.length; i++) {
          if(!files[i].isDirectory() && files[i].getName().equals(s))
            return i;
      }

      return -1;
    }

    /**
     * Checks if a folder exists in the current view.
     * @param s name of the folder to check for existence
     * @return the row in the current view at which the folder occurs, or
     * -1 if the folder does not exist at the current view.
     */
    private int folderExists(String s) {
      TAMtFile[] files = new TAMtFile[getRoot(triFiles).getChildCount()];
      for (int i = 0;i<files.length ;i++ ) {
        DefaultMutableTreeNode node =
          (DefaultMutableTreeNode)getRoot(triFiles).getChildAt(i);
        files[i] = (TAMtFile)node.getUserObject();
      }

      for(int i = 0; i < files.length; i++) {
          if(files[i].isDirectory() && files[i].getName().equals(s))
            return i;
      }

      return -1;
    }

    /**
     * Checks if a filename is filtered by the currently active filefilter.
     * A file is filtered if it ends with one of the strings mentioned in
     * fileFilter.
     * @param s the name of a file
     */
    private boolean fileFiltered(String s) {
      if (fileFilter == null) return true;

      for (int i = 0;i<fileFilter.length ;i++ ) {
        if (s.endsWith(fileFilter[i]))
          return true;
      }

      return false;
    }

    /**
     * Shows a JOptionPane error dialog box with the specified error.
     * @param error the error code to display (from AMtc)
     */
    private void showError(int error) {
      if ((error == AMtc.NO_ERRORS) || (error == AMtc.ERROR_USER_ABORTED))
        return;
      else
        JOptionPane.showMessageDialog(this, AMtc.getErrorMsg(error),
        AMtc.MESSAGE_HEADER_ERROR, JOptionPane.ERROR_MESSAGE);
    }

    public static String fileName;   //name for the chosen file
    public static String filePath;   //path for the chosen file
    private String authorname;       //name of the author requesting this dialog
    private int filemode;            //the mode for which to show files, which
                                     //is either AMtc.APP_FILES_MODE or
                                     //AMtc.AUTHOR_FILES_MODE
    private String[] fileFilter=null;//only files that end with one of the
                                     //specified strings will be displayed. If
                                     //null, all files will be displayed.
    private DefaultTreeModel tm;     //model for triFiles
    private TAMtFile treeRoot;       //root of triFiles
    private URL url;                 //URL to the WOW! server
    private AMtClient AMt;           //class for servlet communication
    private int dlgMode;             //mode of this dialog,
                                     //being one of the values below:
    private static final int OPEN_DIALOG = 0; //open file dialog
    private static final int SAVE_DIALOG = 1; //save file dialog
    private static final int LOAD_APP_DIALOG = 2; //save file dialog
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnOk;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnUp;
    private javax.swing.JSeparator jSeparator13;
    private javax.swing.JLabel lblEmpty;
    private javax.swing.JLabel lblFileName;
    private javax.swing.JPanel pnlButtons;
    private javax.swing.JPanel pnlClose;
    private javax.swing.JPanel pnlEnterFilename;
    private javax.swing.JPanel pnlFiles;
    private javax.swing.JPanel pnlMain;
    private javax.swing.JScrollPane spnRemoteAppFiles;
    private javax.swing.JTree triFiles;
    private javax.swing.JTextField txtFileName;
    private javax.swing.JTextField txtPath;
    // End of variables declaration//GEN-END:variables

}