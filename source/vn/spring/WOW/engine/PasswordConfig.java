/*


    This file is part of WOW! based on AHA! (Adaptive Hypermedia for All) which is free software (GNU General Public License) developed by Paul De Bra - Eindhoven University of Technology and University

    WOW! is also open source software; 


*/
/**
 * PasswordConfig.java 1.0 June 1, 2008
 *
 *Copyright (c) 2006 by Eindhoven University of Technology and modified by University of Science, 2008, Vietnam.
 * All Rights Reserved.
 *
 * This software is proprietary information of Eindhoven University of Technology and University
 * of Science. It may be used according to the GNU license of Eindhoven University of Technology
 */
package vn.spring.WOW.engine;

import vn.spring.WOW.exceptions.*;
import vn.spring.WOW.datacomponents.*;
import vn.spring.WOW.WOWStatic;
import vn.spring.WOW.WOWDB.*;
import vn.spring.WOW.Utils.*;
import java.io.*;
import java.util.*;


/**
 * The PasswordConfig class is a servlet that lets the user
 * change his/her password.
 */
public class PasswordConfig {

    String Password;// the user's password;
    boolean found = false;
    private Profile profile;
    private String login;
    private StringBuffer sb;

    public Resource getOutput(Profile profile, String login, Map params) throws InvalidAttributeException {

    this.profile = profile;
    this.login = login;
    sb = new StringBuffer();
    // The header generation is "borrowed" from XMLHandler
    sb.append("<html><body>");

        if (login.startsWith("an_userID")) {
            sb.append("<h3>Sorry, anonymous users cannot have a password.</h3>");
        }
        else {
            try {
                CgiUtil Util =new CgiUtil(params);
                if (!Util.containsKey("doneconfig")) {
                    genConfig("?handler=PasswordConfig");
                }
                else {
                    changeConfig(Util, sb);
                }
            } catch(Exception e) {e.printStackTrace();}
        }

    sb.append("</body>\n</html>\n");
        InputStream insb = new ByteArrayInputStream(sb.toString().getBytes());
        return new Resource(insb, new ResourceType("text/html"));
    }

  /**
   * This method writes out the password as an HTML form that can be used
   * for changing the password.
   * There is one String parameter: a URL for the script or servlet to
   * handle the submitted form.
   */
  public void genConfig(String ChangeCgi) {

    sb.append("<h2>Configuration Setup for " + login + "</h2>\n");
    sb.append("<form method=\"POST\" action=\"" + ChangeCgi + "\">\n");

    sb.append("<h3>Password</h3>\n");
    sb.append("<table>\n");
    sb.append("<tr>\n");
    sb.append("<td>Current:<br /></td>\n");
    sb.append("<td><input type = \"password\" name = \"current\" value = \"\" size = \"40\"><br /></td>\n");
    sb.append("</tr>\n");
    sb.append("<tr>\n");
    sb.append("<td>New:<br /></td>\n");
    sb.append("<td><input type = \"password\" name = \"new\" value = \"\" size = \"40\"><br /></td>\n");
    sb.append("</tr>\n");
    sb.append("<tr>\n");
    sb.append("<td>Retype:<br /></td>\n");
    sb.append("<td><input type = \"password\" name = \"retype\" value = \"\" size = \"40\"><br /></td>\n");
    sb.append("</tr>\n");
    sb.append("</table>\n");
    sb.append("<input type=hidden name=doneconfig value= />\n");
    sb.append("<input type=\"SUBMIT\" value=\"Effectuate Changes\">\n");
    sb.append("<input type=\"RESET\" value=\"Reset to Previous Settings\">\n");
    sb.append("</form>\n");
  }

  /**
   * This method reads input from a POST request and replaces the user model
   * by the values contained in the request.
   * The form for this POST request is supposed to be the one generated by
   * the "genConfig" method.
   */
  public void changeConfig(CgiUtil Util, StringBuffer sb) throws WOWException, DatabaseException, InvalidProfileException, InvalidConceptException, InvalidAttributeException {

    WOWDB db = WOWStatic.DB();

    // complete html document
    String currentPassword=null;
    String newPassword=null;
    String retypePassword=null;

    currentPassword = Util.get("current").toString();
    newPassword = Util.get("new").toString();
    retypePassword = Util.get("retype").toString();

    if (!currentPassword.equals(profile.getAttributeValue("personal","password")))
    sb.append("The current password does not match the actual password.");
    else if (!newPassword.equals(retypePassword))
    sb.append("The two new passwords do not match.");
    else {profile.setAttributeValue("personal","password", newPassword);
    db.getProfileDB().setProfile(profile.id, profile);
    sb.append("<h2>Password for " + profile.getAttributeValue("personal","id") + " has been updated.</h2>\n");
    sb.append("<p>You can now go back and continue reading using the updated password.</p>");
    }
  }

}
