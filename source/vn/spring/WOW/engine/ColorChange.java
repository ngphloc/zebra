/*


    This file is part of WOW! based on AHA! (Adaptive Hypermedia for All) which is free software (GNU General Public License) developed by Paul De Bra - Eindhoven University of Technology and University

    WOW! is also open source software; 


*/
/**
 * ColorChange.java 1.0, June 1, 2008
 *
 *Copyright (c) 2006 by Eindhoven University of Technology and modified by University of Science, 2008, Vietnam.
 * All Rights Reserved.
 *
 * This software is proprietary information of Eindhoven University of Technology and University
 * of Science. It may be used according to the GNU license of Eindhoven University of Technology
 */

package vn.spring.WOW.engine;

import java.awt.Color;
import java.util.*;
import java.io.*;
import vn.spring.WOW.exceptions.*;
import vn.spring.WOW.datacomponents.*;
import vn.spring.WOW.WOWStatic;
import vn.spring.WOW.WOWDB.*;
import vn.spring.WOW.Utils.*;

/**
 * The ColorChange servlet processes the input parameters from
 * the Color Configuration form.
 */

public class ColorChange {

    public Profile profile;
    private String login;
    private StringBuffer sb;

    public Resource getOutput(Profile profile, String login, Map params) {
        try {
            this.profile = profile;
            this.login = login;
            sb = new StringBuffer();
            // Preprocess the form input parameters
            CgiUtil Util = new CgiUtil(params);
            // Change the colors
            changeConfig(sb, Util, profile);
            WOWStatic.DB().getProfileDB().setProfile(profile.id, profile);
        } catch (Exception e) {
            e.printStackTrace();
        }
        InputStream insb = new ByteArrayInputStream(sb.toString().getBytes());
        return new Resource(insb, new ResourceType("text/html"));
    }


  /**
   * This method reads input from a POST request and replaces the user model
   * by the values contained in the request.
   * The form for this POST request is supposed to be the one generated by
   * the "genConfig" method.
   * There is a string parameter which contains the title for the
   * generated HTML page.
   */
  public StringBuffer changeConfig(StringBuffer sb, CgiUtil Util, Profile profile) throws DatabaseException, InvalidProfileException, InvalidConceptException, InvalidAttributeException {
    ConceptDB cdb = WOWStatic.DB().getConceptDB();
    Vector linkclasses = WOWStatic.CourseInfoTbl.getCourseInfo(profile.getAttributeValue("personal", "course")).linkclasses;
    for (Enumeration e = Util.keys();
         e.hasMoreElements(); ) {
        String attribute = (String)e.nextElement();
        String value = (String)Util.get(attribute);
        for (int i=0;i<linkclasses.size();i++) {
            String linkclass = (String)linkclasses.get(i);
            if (attribute.equals("class_"+linkclass)) {
                profile.setAttributeValue(cdb, "personal", "class_"+linkclass, value);
            } else if (attribute.equals("class_"+linkclass+"_brightness")) {
                if (value.equals("darker"))
                    profile.setAttributeValue(cdb, "personal", "class_"+linkclass, printColor(new Color(Integer.decode("0x"+profile.getAttributeValue("personal", "class_"+linkclass)).intValue()).darker().darker()));
                else if (value.equals("lighter"))
                    profile.setAttributeValue(cdb, "personal", "class_"+linkclass, printColor(new Color(Integer.decode("0x"+profile.getAttributeValue("personal", "class_"+linkclass)).intValue()).brighter().brighter()));
            } else if (attribute.equals("class_"+linkclass+"_visited")) {
                profile.setAttributeValue(cdb, "personal", "class_"+linkclass+"_visited", value);
            } else if (attribute.equals("class_"+linkclass+"_visited_brightness")) {
                if (value.equals("darker"))
                    profile.setAttributeValue(cdb, "personal", "class_"+linkclass+"_visited", printColor(new Color(Integer.decode("0x"+profile.getAttributeValue("personal", "class_"+linkclass+"_visited")).intValue()).darker().darker()));
                else if (value.equals("lighter"))
                    profile.setAttributeValue(cdb, "personal", "class_"+linkclass+"_visited", printColor(new Color(Integer.decode("0x"+profile.getAttributeValue("personal", "class_"+linkclass+"_visited")).intValue()).brighter().brighter()));
            }
        }
    }

    // complete html document

    sb.append("<html><body>");

    sb.append("<H2>Configuration Setup for " + login + " has been updated.</H2>\n");
    sb.append("You can now go back and continue reading using the updated setup.\n");
    sb.append("</body>\n</html>\n");
    return sb;
  }

  public static String printColor(Color c) {
    int i = c.getRed();
    String r,g,b;
    if (i<10)
      r = "0" + Integer.toHexString(c.getRed());
    else
      r = Integer.toHexString(c.getRed());
    i = c.getGreen();
    if (i<10)
      g = "0" + Integer.toHexString(c.getGreen());
    else
      g = Integer.toHexString(c.getGreen());
    i = c.getBlue();
    if (i<10)
      b = "0" + Integer.toHexString(c.getBlue());
    else
      b = Integer.toHexString(c.getBlue());
    return r + g + b;
  }

}
